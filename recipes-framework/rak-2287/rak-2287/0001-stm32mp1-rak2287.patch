From 9ff3820167649e80d3bc921f739e24477d46815e Mon Sep 17 00:00:00 2001
From: Amit Kumar <amit-emr.kumar@st.com>
Date: Thu, 11 May 2023 22:20:57 +0530
Subject: [PATCH] modifed rak2287 for STM32MP1

---
 .gitignore                                    |  11 -
 Makefile                                      |  49 +-
 libloragw/Makefile                            |  30 +-
 libloragw/inc/loragw_mcu.h                    |   6 +-
 libloragw/src/loragw_mcu.c                    |  25 +
 libloragw/src/loragw_stts751.c                |   6 +-
 libloragw/tst/test_loragw_gps.c               |   2 +-
 libloragw/tst/test_loragw_gps_i2c.c           | 429 ++++++++++++++++++
 libloragw/tst/test_loragw_gps_uart.c          | 429 ++++++++++++++++++
 packet_forwarder/Makefile                     |  27 --
 packet_forwarder/global_conf.json             |  95 ++++
 .../global_conf.json.sx1250.AS923.USB         | 122 -----
 .../global_conf.json.sx1250.CN490.USB         | 126 -----
 .../global_conf.json.sx1250.EU868             | 126 -----
 .../global_conf.json.sx1250.EU868.USB         | 125 -----
 .../global_conf.json.sx1250.US915             | 113 -----
 .../global_conf.json.sx1250.US915.USB         | 112 -----
 .../global_conf.json.sx1255.CN490.full-duplex |  89 ----
 .../global_conf.json.sx1257.EU868             |  95 ----
 packet_forwarder/local_conf.json              |   7 +
 .../region/global_conf.as923-1.json           |  95 ++++
 .../region/global_conf.as923-2.json           |  96 ++++
 .../region/global_conf.as923-3.json           |  95 ++++
 .../region/global_conf.as923-4.json           |  96 ++++
 .../region/global_conf.au915-928-1.json       |  95 ++++
 .../region/global_conf.au915-928-2.json       |  95 ++++
 .../region/global_conf.au915-928-3.json       |  95 ++++
 .../region/global_conf.au915-928-4.json       |  95 ++++
 .../region/global_conf.au915-928-5.json       |  95 ++++
 .../region/global_conf.au915-928-6.json       |  95 ++++
 .../region/global_conf.au915-928-7.json       |  95 ++++
 .../region/global_conf.au915-928-8.json       |  95 ++++
 .../global_conf.cn470-510-1.json}             |  88 ++--
 .../region/global_conf.cn470-510-10.json      |  95 ++++
 .../region/global_conf.cn470-510-11.json      |  95 ++++
 .../region/global_conf.cn470-510-12.json      |  95 ++++
 .../region/global_conf.cn470-510-2.json       |  95 ++++
 .../region/global_conf.cn470-510-3.json       |  95 ++++
 .../region/global_conf.cn470-510-4.json       |  95 ++++
 .../region/global_conf.cn470-510-5.json       |  95 ++++
 .../region/global_conf.cn470-510-6.json       |  95 ++++
 .../region/global_conf.cn470-510-7.json       |  95 ++++
 .../region/global_conf.cn470-510-8.json       |  95 ++++
 .../region/global_conf.cn470-510-9.json       |  95 ++++
 .../region/global_conf.cn779-787-1.json       |  95 ++++
 .../region/global_conf.eu433-434-1.json       |  95 ++++
 .../region/global_conf.eu863-870-1.json       |  95 ++++
 .../region/global_conf.in865-867-1.json       |  95 ++++
 .../region/global_conf.kr920-923-1.json       |  94 ++++
 .../region/global_conf.ru864-870-1.json       |  95 ++++
 .../region/global_conf.us902-928-1.json       |  95 ++++
 .../region/global_conf.us902-928-2.json       |  95 ++++
 .../region/global_conf.us902-928-3.json       |  95 ++++
 .../region/global_conf.us902-928-4.json       |  95 ++++
 .../region/global_conf.us902-928-5.json       |  95 ++++
 .../region/global_conf.us902-928-6.json       |  95 ++++
 .../region/global_conf.us902-928-7.json       |  95 ++++
 .../region/global_conf.us902-928-8.json       |  95 ++++
 packet_forwarder/reset_lgw.sh                 |  30 ++
 packet_forwarder/src/lora_pkt_fwd.c           |  64 ++-
 packet_forwarder/src/test_loragw_gps_i2c.c    | 429 ++++++++++++++++++
 packet_forwarder/src/test_loragw_gps_uart.c   | 429 ++++++++++++++++++
 target.cfg                                    |  10 -
 tools/node-red-registers.json                 | 159 +++----
 tools/payload_tools/Makefile                  |  93 ++--
 tools/reset_lgw.sh                            |  93 ----
 tools/systemd/lora_pkt_fwd.service            |   6 +-
 util_boot/Makefile                            |  78 +---
 util_chip_id/Makefile                         |  77 +---
 util_net_downlink/Makefile                    |  77 +---
 util_spectral_scan/Makefile                   |  76 +---
 71 files changed, 5747 insertions(+), 1502 deletions(-)
 delete mode 100644 .gitignore
 create mode 100644 libloragw/tst/test_loragw_gps_i2c.c
 create mode 100644 libloragw/tst/test_loragw_gps_uart.c
 create mode 100644 packet_forwarder/global_conf.json
 delete mode 100644 packet_forwarder/global_conf.json.sx1250.AS923.USB
 delete mode 100644 packet_forwarder/global_conf.json.sx1250.CN490.USB
 delete mode 100644 packet_forwarder/global_conf.json.sx1250.EU868
 delete mode 100644 packet_forwarder/global_conf.json.sx1250.EU868.USB
 delete mode 100644 packet_forwarder/global_conf.json.sx1250.US915
 delete mode 100644 packet_forwarder/global_conf.json.sx1250.US915.USB
 delete mode 100644 packet_forwarder/global_conf.json.sx1255.CN490.full-duplex
 delete mode 100644 packet_forwarder/global_conf.json.sx1257.EU868
 create mode 100644 packet_forwarder/local_conf.json
 create mode 100644 packet_forwarder/region/global_conf.as923-1.json
 create mode 100644 packet_forwarder/region/global_conf.as923-2.json
 create mode 100644 packet_forwarder/region/global_conf.as923-3.json
 create mode 100644 packet_forwarder/region/global_conf.as923-4.json
 create mode 100644 packet_forwarder/region/global_conf.au915-928-1.json
 create mode 100644 packet_forwarder/region/global_conf.au915-928-2.json
 create mode 100644 packet_forwarder/region/global_conf.au915-928-3.json
 create mode 100644 packet_forwarder/region/global_conf.au915-928-4.json
 create mode 100644 packet_forwarder/region/global_conf.au915-928-5.json
 create mode 100644 packet_forwarder/region/global_conf.au915-928-6.json
 create mode 100644 packet_forwarder/region/global_conf.au915-928-7.json
 create mode 100644 packet_forwarder/region/global_conf.au915-928-8.json
 rename packet_forwarder/{global_conf.json.sx1250.CN490 => region/global_conf.cn470-510-1.json} (51%)
 create mode 100644 packet_forwarder/region/global_conf.cn470-510-10.json
 create mode 100644 packet_forwarder/region/global_conf.cn470-510-11.json
 create mode 100644 packet_forwarder/region/global_conf.cn470-510-12.json
 create mode 100644 packet_forwarder/region/global_conf.cn470-510-2.json
 create mode 100644 packet_forwarder/region/global_conf.cn470-510-3.json
 create mode 100644 packet_forwarder/region/global_conf.cn470-510-4.json
 create mode 100644 packet_forwarder/region/global_conf.cn470-510-5.json
 create mode 100644 packet_forwarder/region/global_conf.cn470-510-6.json
 create mode 100644 packet_forwarder/region/global_conf.cn470-510-7.json
 create mode 100644 packet_forwarder/region/global_conf.cn470-510-8.json
 create mode 100644 packet_forwarder/region/global_conf.cn470-510-9.json
 create mode 100644 packet_forwarder/region/global_conf.cn779-787-1.json
 create mode 100644 packet_forwarder/region/global_conf.eu433-434-1.json
 create mode 100644 packet_forwarder/region/global_conf.eu863-870-1.json
 create mode 100644 packet_forwarder/region/global_conf.in865-867-1.json
 create mode 100644 packet_forwarder/region/global_conf.kr920-923-1.json
 create mode 100644 packet_forwarder/region/global_conf.ru864-870-1.json
 create mode 100644 packet_forwarder/region/global_conf.us902-928-1.json
 create mode 100644 packet_forwarder/region/global_conf.us902-928-2.json
 create mode 100644 packet_forwarder/region/global_conf.us902-928-3.json
 create mode 100644 packet_forwarder/region/global_conf.us902-928-4.json
 create mode 100644 packet_forwarder/region/global_conf.us902-928-5.json
 create mode 100644 packet_forwarder/region/global_conf.us902-928-6.json
 create mode 100644 packet_forwarder/region/global_conf.us902-928-7.json
 create mode 100644 packet_forwarder/region/global_conf.us902-928-8.json
 create mode 100644 packet_forwarder/reset_lgw.sh
 create mode 100644 packet_forwarder/src/test_loragw_gps_i2c.c
 create mode 100644 packet_forwarder/src/test_loragw_gps_uart.c
 delete mode 100644 target.cfg
 delete mode 100755 tools/reset_lgw.sh

diff --git a/.gitignore b/.gitignore
deleted file mode 100644
index f691a61..0000000
--- a/.gitignore
+++ /dev/null
@@ -1,11 +0,0 @@
-*/*.a
-*/obj/
-*.swp
-bin/
-libloragw/inc/config.h
-libloragw/test_loragw_*
-packet_forwarder/lora_pkt_fwd
-util_chip_id/chip_id
-util_net_downlink/net_downlink
-util_boot/boot
-util_spectral_scan/spectral_scan
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 687c12c..ae0c8d8 100644
--- a/Makefile
+++ b/Makefile
@@ -4,51 +4,24 @@ ARCH ?=
 CROSS_COMPILE ?=
 export
 
-### general build targets
-
-.PHONY: all clean install install_conf libtools libloragw packet_forwarder util_net_downlink util_chip_id util_boot util_spectral_scan
-
-all: libtools libloragw packet_forwarder util_net_downlink util_chip_id util_boot util_spectral_scan
-
-libtools:
-	$(MAKE) all -e -C $@
-
-libloragw: libtools
-	$(MAKE) all -e -C $@
-
-packet_forwarder: libloragw
-	$(MAKE) all -e -C $@
-
-util_net_downlink: libtools
-	$(MAKE) all -e -C $@
-
-util_chip_id: libloragw
-	$(MAKE) all -e -C $@
-
-util_boot: libloragw
-	$(MAKE) all -e -C $@
-
-util_spectral_scan: libloragw
-	$(MAKE) all -e -C $@
-
+all:  
+
+	$(MAKE) all -e -C libtools
+	$(MAKE) all -e -C libloragw
+	$(MAKE) all -e -C tools/payload_tools
+	$(MAKE) all -e -C packet_forwarder
+	$(MAKE) all -e -C util_net_downlink
+	$(MAKE) all -e -C util_chip_id
+	$(MAKE) all -e -C util_boot
+	$(MAKE) all -e -C util_spectral_scan
 clean:
 	$(MAKE) clean -e -C libtools
 	$(MAKE) clean -e -C libloragw
+	$(MAKE) clean -e -C tools/payload_tools
 	$(MAKE) clean -e -C packet_forwarder
 	$(MAKE) clean -e -C util_net_downlink
 	$(MAKE) clean -e -C util_chip_id
 	$(MAKE) clean -e -C util_boot
 	$(MAKE) clean -e -C util_spectral_scan
 
-install:
-	$(MAKE) install -e -C libloragw
-	$(MAKE) install -e -C packet_forwarder
-	$(MAKE) install -e -C util_net_downlink
-	$(MAKE) install -e -C util_chip_id
-	$(MAKE) install -e -C util_boot
-	$(MAKE) install -e -C util_spectral_scan
-
-install_conf:
-	$(MAKE) install_conf -e -C packet_forwarder
-
 ### EOF
diff --git a/libloragw/Makefile b/libloragw/Makefile
index 881442f..2bfc8c5 100644
--- a/libloragw/Makefile
+++ b/libloragw/Makefile
@@ -2,7 +2,7 @@
 
 LIBLORAGW_VERSION := `cat ../VERSION`
 include library.cfg
-include ../target.cfg
+ 
 
 ### constant symbols
 
@@ -34,6 +34,8 @@ all: 	libloragw.a \
 		test_loragw_com_sx1261 \
 		test_loragw_counter \
 		test_loragw_gps \
+		test_loragw_gps_i2c \
+		test_loragw_gps_uart \
 		test_loragw_toa \
 		test_loragw_sx1261_rssi
 
@@ -43,23 +45,7 @@ clean:
 	rm -f $(OBJDIR)/*.o
 	rm -f inc/config.h
 
-install:
-ifneq ($(strip $(TARGET_IP)),)
- ifneq ($(strip $(TARGET_DIR)),)
-  ifneq ($(strip $(TARGET_USR)),)
-	@echo "---- Copying libloragw files to $(TARGET_IP):$(TARGET_DIR)"
-	@ssh $(TARGET_USR)@$(TARGET_IP) "mkdir -p $(TARGET_DIR)"
-	@scp test_loragw_* $(TARGET_USR)@$(TARGET_IP):$(TARGET_DIR)
-	@scp ../tools/reset_lgw.sh $(TARGET_USR)@$(TARGET_IP):$(TARGET_DIR)
-  else
-	@echo "ERROR: TARGET_USR is not configured in target.cfg"
-  endif
- else
-	@echo "ERROR: TARGET_DIR is not configured in target.cfg"
- endif
-else
-	@echo "ERROR: TARGET_IP is not configured in target.cfg"
-endif
+ 
 
 ### transpose library.cfg into a C header file : config.h
 
@@ -125,7 +111,7 @@ libloragw.a: $(OBJDIR)/loragw_spi.o \
 			 $(OBJDIR)/loragw_lbt.o \
 			 $(OBJDIR)/loragw_stts751.o \
 			 $(OBJDIR)/loragw_gps.o \
-			 $(OBJDIR)/loragw_sx1302_timestamp.o \
+ 			 $(OBJDIR)/loragw_sx1302_timestamp.o \
 			 $(OBJDIR)/loragw_sx1302_rx.o \
 			 $(OBJDIR)/loragw_ad5338r.o
 	$(AR) rcs $@ $^
@@ -164,6 +150,12 @@ test_loragw_counter: tst/test_loragw_counter.c libloragw.a
 
 test_loragw_gps: tst/test_loragw_gps.c libloragw.a
 	$(CC) $(CFLAGS) -L. -L../libtools  $< -o $@ $(LIBS)
+	
+test_loragw_gps_i2c: tst/test_loragw_gps_i2c.c libloragw.a
+	$(CC) $(CFLAGS) -L. -L../libtools  $< -o $@ $(LIBS)
+	
+test_loragw_gps_uart: tst/test_loragw_gps_uart.c libloragw.a
+	$(CC) $(CFLAGS) -L. -L../libtools  $< -o $@ $(LIBS)		
 
 test_loragw_toa: tst/test_loragw_toa.c libloragw.a
 	$(CC) $(CFLAGS) -L. -L../libtools  $< -o $@ $(LIBS)
diff --git a/libloragw/inc/loragw_mcu.h b/libloragw/inc/loragw_mcu.h
index 0d0588f..9accf80 100644
--- a/libloragw/inc/loragw_mcu.h
+++ b/libloragw/inc/loragw_mcu.h
@@ -45,14 +45,16 @@ typedef enum order_id_e
     ORDER_ID__REQ_BOOTLOADER_MODE = 0x02,
     ORDER_ID__REQ_RESET           = 0x03,
     ORDER_ID__REQ_WRITE_GPIO      = 0x04,
-    ORDER_ID__REQ_MULTIPLE_SPI    = 0x05,
+    ORDER_ID__REQ_SPI             = 0x05, /* deprecated */
+    ORDER_ID__REQ_MULTIPLE_SPI    = 0x06,
 
     ORDER_ID__ACK_PING            = 0x40,
     ORDER_ID__ACK_GET_STATUS      = 0x41,
     ORDER_ID__ACK_BOOTLOADER_MODE = 0x42,
     ORDER_ID__ACK_RESET           = 0x43,
     ORDER_ID__ACK_WRITE_GPIO      = 0x44,
-    ORDER_ID__ACK_MULTIPLE_SPI    = 0x45,
+    ORDER_ID__ACK_SPI             = 0x45, /* deprecated */
+    ORDER_ID__ACK_MULTIPLE_SPI    = 0x46,
 
     ORDER_ID__CMD_ERROR = 0xFF
 } order_id_t;
diff --git a/libloragw/src/loragw_mcu.c b/libloragw/src/loragw_mcu.c
index 4644df8..8f06640 100644
--- a/libloragw/src/loragw_mcu.c
+++ b/libloragw/src/loragw_mcu.c
@@ -146,6 +146,8 @@ const char * cmd_get_str(const uint8_t cmd) {
             return "REQ_RESET";
         case ORDER_ID__REQ_WRITE_GPIO:
             return "REQ_WRITE_GPIO";
+        case ORDER_ID__REQ_SPI:
+            return "REQ_SPI";
         case ORDER_ID__REQ_MULTIPLE_SPI:
             return "REQ_MULTIPLE_SPI";
         default:
@@ -472,6 +474,29 @@ int decode_ack_gpio_access(const uint8_t * hdr, const uint8_t * payload, uint8_t
 
 /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
 
+int decode_ack_spi_access(const uint8_t * hdr, const uint8_t * payload) {
+    /* sanity checks */
+    if ((hdr == NULL) || (payload == NULL)) {
+        printf("ERROR: invalid parameter\n");
+        return -1;
+    }
+
+    if (cmd_get_type(hdr) != ORDER_ID__ACK_SPI) {
+        printf("ERROR: wrong ACK type for ACK_SPI (expected:0x%02X, got 0x%02X)\n", ORDER_ID__ACK_SPI, cmd_get_type(hdr));
+        return -1;
+    }
+
+#if DEBUG_VERBOSE
+    DEBUG_MSG   ("## ACK_SPI_ACCESS\n");
+    DEBUG_PRINTF("   id:           0x%02X\n", cmd_get_id(hdr));
+    DEBUG_PRINTF("   size:         %u\n", cmd_get_size(hdr));
+#endif
+
+    return 0;
+}
+
+/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
+
 int decode_ack_spi_bulk(const uint8_t * hdr, const uint8_t * payload) {
     uint8_t req_id, req_type, req_status;
     uint16_t frame_size;
diff --git a/libloragw/src/loragw_stts751.c b/libloragw/src/loragw_stts751.c
index 7766961..dea8616 100644
--- a/libloragw/src/loragw_stts751.c
+++ b/libloragw/src/loragw_stts751.c
@@ -78,6 +78,7 @@ License: Revised BSD License, see LICENSE.TXT file include in the project
 /* --- PUBLIC FUNCTIONS DEFINITION ------------------------------------------ */
 
 int stts751_configure(int i2c_fd, uint8_t i2c_addr) {
+#if 0
     int err;
     uint8_t val;
 
@@ -141,13 +142,14 @@ int stts751_configure(int i2c_fd, uint8_t i2c_addr) {
         DEBUG_PRINTF("ERROR: failed to write I2C device 0x%02X (err=%i)\n", i2c_addr, err);
         return LGW_I2C_ERROR;
     }
-
+#endif
     return LGW_I2C_SUCCESS;
 }
 
 /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
 
 int stts751_get_temperature(int i2c_fd, uint8_t i2c_addr, float * temperature) {
+#if 0
     int err;
     uint8_t high_byte, low_byte;
     int8_t h;
@@ -176,7 +178,7 @@ int stts751_get_temperature(int i2c_fd, uint8_t i2c_addr, float * temperature) {
     *temperature = ((h << 8) | low_byte) / 256.0;
 
     DEBUG_PRINTF("Temperature: %f C (h:0x%02X l:0x%02X)\n", *temperature, high_byte, low_byte);
-
+#endif
     return LGW_I2C_SUCCESS;
 }
 
diff --git a/libloragw/tst/test_loragw_gps.c b/libloragw/tst/test_loragw_gps.c
index 5ce6333..d831c06 100644
--- a/libloragw/tst/test_loragw_gps.c
+++ b/libloragw/tst/test_loragw_gps.c
@@ -268,7 +268,7 @@ int main(int argc, char **argv)
     }
 
     /* Open and configure GPS */
-    i = lgw_gps_enable("/dev/ttyS0", "ubx7", 0, &gps_tty_dev);
+    i = lgw_gps_enable("/dev/ttySTM1", "ubx7", 0, &gps_tty_dev);
     if (i != LGW_GPS_SUCCESS) {
         printf("ERROR: Failed to enable GPS\n");
         exit(EXIT_FAILURE);
diff --git a/libloragw/tst/test_loragw_gps_i2c.c b/libloragw/tst/test_loragw_gps_i2c.c
new file mode 100644
index 0000000..95385b9
--- /dev/null
+++ b/libloragw/tst/test_loragw_gps_i2c.c
@@ -0,0 +1,429 @@
+/*
+ / _____)             _              | |
+( (____  _____ ____ _| |_ _____  ____| |__
+ \____ \| ___ |    (_   _) ___ |/ ___)  _ \
+ _____) ) ____| | | || |_| ____( (___| | | |
+(______/|_____)_|_|_| \__)_____)\____)_| |_|
+  (C)2019 Semtech
+
+Description:
+    Minimum test program for the loragw_gps module
+
+License: Revised BSD License, see LICENSE.TXT file include in the project
+*/
+
+
+/* -------------------------------------------------------------------------- */
+/* --- DEPENDANCIES --------------------------------------------------------- */
+
+/* fix an issue between POSIX and C99 */
+#if __STDC_VERSION__ >= 199901L
+    #define _XOPEN_SOURCE 600
+#else
+    #define _XOPEN_SOURCE 500
+#endif
+
+#include <stdint.h>     /* C99 types */
+#include <stdbool.h>    /* bool type */
+#include <stdio.h>      /* printf */
+#include <string.h>     /* memset */
+#include <signal.h>     /* sigaction */
+#include <stdlib.h>     /* exit */
+#include <unistd.h>     /* read */
+
+#include "loragw_hal.h"
+#include "loragw_gps.h"
+#include "loragw_aux.h"
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE MACROS ------------------------------------------------------- */
+
+#define MATCH(a,b) ( ((int32_t)(a-b)<=1) && ((int32_t)(a-b)>=-1) ) /* tolerate 1µs */
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE CONSTANTS ---------------------------------------------------- */
+
+#define COM_TYPE_DEFAULT LGW_COM_SPI
+#define COM_PATH_DEFAULT "/dev/spidev0.0"
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE VARIABLES ---------------------------------------------------- */
+
+static int exit_sig = 0; /* 1 -> application terminates cleanly (shut down hardware, close open files, etc) */
+static int quit_sig = 0; /* 1 -> application terminates without shutting down the hardware */
+
+struct tref ppm_ref;
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE FUNCTIONS DECLARATION ---------------------------------------- */
+
+static void sig_handler(int sigio);
+static void gps_process_sync(void);
+static void gps_process_coords(void);
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE FUNCTIONS DEFINITION ----------------------------------------- */
+
+void usage(void) {
+    //printf("Library version information: %s\n", lgw_version_info());
+    printf("Available options:\n");
+    printf(" -h print this help\n");
+    printf(" -u        set COM type as USB (default is SPI)\n");
+    printf(" -d <path> COM path to be used to connect the concentrator\n");
+    printf("            => default path (SPI): " COM_PATH_DEFAULT "\n");
+    printf(" -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");
+    printf(" -r <uint> Radio type (1255, 1257, 1250)\n");
+}
+
+static void sig_handler(int sigio) {
+    if (sigio == SIGQUIT) {
+        quit_sig = 1;;
+    } else if ((sigio == SIGINT) || (sigio == SIGTERM)) {
+        exit_sig = 1;
+    }
+}
+
+static void gps_process_sync(void) {
+    /* variables for PPM pulse GPS synchronization */
+    uint32_t ppm_tstamp;
+    struct timespec ppm_gps;
+    struct timespec ppm_utc;
+
+    /* variables for timestamp <-> GPS time conversions */
+    uint32_t x, z;
+    struct timespec y;
+
+    /* get GPS time for synchronization */
+    int i = lgw_gps_get(&ppm_utc, &ppm_gps, NULL, NULL);
+    if (i != LGW_GPS_SUCCESS) {
+        printf("    No valid reference GPS time available, synchronization impossible.\n");
+        return;
+    }
+
+    /* get timestamp for synchronization */
+    i = lgw_get_trigcnt(&ppm_tstamp);
+    if (i != LGW_HAL_SUCCESS) {
+        printf("    Failed to read timestamp, synchronization impossible.\n");
+        return;
+    }
+
+    /* try to update synchronize time reference with the new GPS & timestamp */
+    i = lgw_gps_sync(&ppm_ref, ppm_tstamp, ppm_utc, ppm_gps);
+    if (i != LGW_GPS_SUCCESS) {
+        printf("    Synchronization error.\n");
+        return;
+    }
+
+    /* display result */
+    printf("    * Synchronization successful *\n");
+    printf("    UTC reference time: %lld.%09ld\n", (long long)ppm_ref.utc.tv_sec, ppm_ref.utc.tv_nsec);
+    printf("    GPS reference time: %lld.%09ld\n", (long long)ppm_ref.gps.tv_sec, ppm_ref.gps.tv_nsec);
+    printf("    Internal counter reference value: %u\n", ppm_ref.count_us);
+    printf("    Clock error: %.9f\n", ppm_ref.xtal_err);
+
+    x = ppm_tstamp + 500000;
+
+    /* CNT -> GPS -> CNT */
+    printf("\n");
+    printf("    * Test of timestamp counter <-> GPS value conversion *\n");
+    printf("    Test value: %u\n", x);
+    lgw_cnt2gps(ppm_ref, x, &y);
+    printf("    Conversion to GPS: %lld.%09ld\n", (long long)y.tv_sec, y.tv_nsec);
+    lgw_gps2cnt(ppm_ref, y, &z);
+    printf("    Converted back: %u ==> %dµs\n", z, (int32_t)(z-x));
+    /* Display test result */
+    if (MATCH(x,z)) {
+        printf("    ** PASS **: (SX1302 -> GPS -> SX1302) conversion MATCH\n");
+    } else {
+        printf("    ** FAILED **: (SX1302 -> GPS -> SX1302) conversion MISMATCH\n");
+    }
+
+    /* CNT -> UTC -> CNT */
+    printf("\n");
+    printf("    * Test of timestamp counter <-> UTC value conversion *\n");
+    printf("    Test value: %u\n", x);
+    lgw_cnt2utc(ppm_ref, x, &y);
+    printf("    Conversion to UTC: %lld.%09ld\n", (long long)y.tv_sec, y.tv_nsec);
+    lgw_utc2cnt(ppm_ref, y, &z);
+    printf("    Converted back: %u ==> %dµs\n", z, (int32_t)(z-x));
+    /* Display test result */
+    if (MATCH(x,z)) {
+        printf("    ** PASS **: (SX1302 -> UTC -> SX1302) conversion MATCH\n");
+    } else {
+        printf("    ** FAILED **: (SX1302 -> UTC -> SX1302) conversion MISMATCH\n");
+    }
+}
+
+static void gps_process_coords(void) {
+    /* position variable */
+    struct coord_s coord;
+    struct coord_s gpserr;
+    int    i = lgw_gps_get(NULL, NULL, &coord, &gpserr);
+
+    /* update gateway coordinates */
+    if (i == LGW_GPS_SUCCESS) {
+        printf("\n");
+        printf("# GPS coordinates: latitude %.5f, longitude %.5f, altitude %i m\n", coord.lat, coord.lon, coord.alt);
+        printf("# GPS err:         latitude %.5f, longitude %.5f, altitude %i m\n", gpserr.lat, gpserr.lon, gpserr.alt);
+    }
+}
+
+/* -------------------------------------------------------------------------- */
+/* --- MAIN FUNCTION -------------------------------------------------------- */
+
+int main(int argc, char **argv)
+{
+    /* SPI interfaces */
+    const char com_path_default[] = COM_PATH_DEFAULT;
+    const char * com_path = com_path_default;
+    lgw_com_type_t com_type = COM_TYPE_DEFAULT;
+
+    struct sigaction sigact; /* SIGQUIT&SIGINT&SIGTERM signal handling */
+
+    int i;
+    unsigned int arg_u;
+
+    /* concentrator variables */
+    uint8_t clocksource = 0;
+    lgw_radio_type_t radio_type = LGW_RADIO_TYPE_SX1250;
+    struct lgw_conf_board_s boardconf;
+    struct lgw_conf_rxrf_s rfconf;
+
+    /* serial variables */
+    char serial_buff[128]; /* buffer to receive GPS data */
+    size_t wr_idx = 0;     /* pointer to end of chars in buffer */
+    int gps_tty_dev; /* file descriptor to the serial port of the GNSS module */
+
+    /* NMEA/UBX variables */
+    enum gps_msg latest_msg; /* keep track of latest NMEA/UBX message parsed */
+
+    /* parse command line options */
+    while ((i = getopt (argc, argv, "hk:r:d:u")) != -1) {
+        switch (i) {
+            case 'h':
+                usage();
+                return -1;
+                break;
+            case 'd':
+                if (optarg != NULL) {
+                    com_path = optarg;
+                }
+                break;
+            case 'u':
+                com_type = LGW_COM_USB;
+                break;
+            case 'r': /* <uint> Radio type */
+                i = sscanf(optarg, "%u", &arg_u);
+                if ((i != 1) || ((arg_u != 1255) && (arg_u != 1257) && (arg_u != 1250))) {
+                    printf("ERROR: argument parsing of -r argument. Use -h to print help\n");
+                    return EXIT_FAILURE;
+                } else {
+                    switch (arg_u) {
+                        case 1255:
+                            radio_type = LGW_RADIO_TYPE_SX1255;
+                            break;
+                        case 1257:
+                            radio_type = LGW_RADIO_TYPE_SX1257;
+                            break;
+                        default: /* 1250 */
+                            radio_type = LGW_RADIO_TYPE_SX1250;
+                            break;
+                    }
+                }
+                break;
+            case 'k': /* <uint> Clock Source */
+                i = sscanf(optarg, "%u", &arg_u);
+                if ((i != 1) || (arg_u > 1)) {
+                    printf("ERROR: argument parsing of -k argument. Use -h to print help\n");
+                    return EXIT_FAILURE;
+                } else {
+                    clocksource = (uint8_t)arg_u;
+                }
+                break;
+            default:
+                printf("ERROR: argument parsing\n");
+                usage();
+                exit(EXIT_FAILURE);
+        }
+    }
+
+    /* configure signal handling */
+    sigemptyset(&sigact.sa_mask);
+    sigact.sa_flags = 0;
+    sigact.sa_handler = sig_handler;
+    sigaction(SIGQUIT, &sigact, NULL);
+    sigaction(SIGINT, &sigact, NULL);
+    sigaction(SIGTERM, &sigact, NULL);
+
+    /* Intro message and library information */
+    printf("Beginning of test for loragw_gps.c\n");
+    printf("*** Library version information ***\n%s\n***\n", lgw_version_info());
+
+    if (com_type == LGW_COM_SPI) {
+        /* Board reset */
+        if (system("./reset_lgw.sh start") != 0) {
+            printf("ERROR: failed to reset SX1302, check your reset_lgw.sh script\n");
+            exit(EXIT_FAILURE);
+        }
+    }
+
+    /* Open and configure GPS */
+    i = lgw_gps_enable("/dev/i2c-1", "ubx7", 0, &gps_tty_dev);
+    if (i != LGW_GPS_SUCCESS) {
+        printf("ERROR: Failed to enable GPS\n");
+        exit(EXIT_FAILURE);
+    }
+
+    /* start concentrator (default conf for IoT SK) */
+    /* board config */
+    memset(&boardconf, 0, sizeof(boardconf));
+    boardconf.lorawan_public = true;
+    boardconf.clksrc = clocksource;
+    boardconf.full_duplex = false;
+    boardconf.com_type = com_type;
+    strncpy(boardconf.com_path, com_path, sizeof boardconf.com_path);
+    boardconf.com_path[sizeof boardconf.com_path - 1] = '\0'; /* ensure string termination */
+    if (lgw_board_setconf(&boardconf) != LGW_HAL_SUCCESS) {
+        printf("ERROR: failed to configure board\n");
+        return EXIT_FAILURE;
+    }
+
+    /* set configuration for RF chains */
+    memset( &rfconf, 0, sizeof rfconf);
+    rfconf.enable = true;
+    rfconf.freq_hz = 868000000;
+    rfconf.rssi_offset = 0.0;
+    rfconf.type = radio_type;
+    rfconf.tx_enable = false;
+    rfconf.single_input_mode = false;
+    if (lgw_rxrf_setconf(0, &rfconf) != LGW_HAL_SUCCESS) {
+        printf("ERROR: failed to configure rxrf 0\n");
+        return EXIT_FAILURE;
+    }
+
+    memset( &rfconf, 0, sizeof rfconf);
+    rfconf.enable = true;
+    rfconf.freq_hz = 868000000;
+    rfconf.rssi_offset = 0.0;
+    rfconf.type = radio_type;
+    rfconf.tx_enable = false;
+    rfconf.single_input_mode = false;
+    if (lgw_rxrf_setconf(1, &rfconf) != LGW_HAL_SUCCESS) {
+        printf("ERROR: failed to configure rxrf 1\n");
+        return EXIT_FAILURE;
+    }
+
+    /* start */
+    if (lgw_start() != LGW_HAL_SUCCESS) {
+        printf("ERROR: IMPOSSIBLE TO START THE GATEWAY\n");
+        exit(EXIT_FAILURE);
+    }
+
+    /* initialize some variables before loop */
+    memset(serial_buff, 0, sizeof serial_buff);
+    memset(&ppm_ref, 0, sizeof ppm_ref);
+
+    /* loop until user action */
+    while ((quit_sig != 1) && (exit_sig != 1)) {
+        size_t rd_idx = 0;
+        size_t frame_end_idx = 0;
+
+        /* blocking non-canonical read on serial port */
+        ssize_t nb_char = read(gps_tty_dev, serial_buff + wr_idx, LGW_GPS_MIN_MSG_SIZE);
+        if (nb_char <= 0) {
+            printf("WARNING: [gps] read() returned value %zd\n", nb_char);
+            continue;
+        }
+        wr_idx += (size_t)nb_char;
+
+        /*******************************************
+         * Scan buffer for UBX/NMEA sync chars and *
+         * attempt to decode frame if one is found *
+         *******************************************/
+        while (rd_idx < wr_idx) {
+            size_t frame_size = 0;
+
+            /* Scan buffer for UBX sync char */
+            if (serial_buff[rd_idx] == (char)LGW_GPS_UBX_SYNC_CHAR) {
+
+                /***********************
+                 * Found UBX sync char *
+                 ***********************/
+                latest_msg = lgw_parse_ubx(&serial_buff[rd_idx], (wr_idx - rd_idx), &frame_size);
+
+                if (frame_size > 0) {
+                    if (latest_msg == INCOMPLETE) {
+                        /* UBX header found but frame appears to be missing bytes */
+                        frame_size = 0;
+                    } else if (latest_msg == INVALID) {
+                        /* message header received but message appears to be corrupted */
+                        printf("WARNING: [gps] could not get a valid message from GPS (no time)\n");
+                        frame_size = 0;
+                    } else if (latest_msg == UBX_NAV_TIMEGPS) {
+                        printf("\n~~ UBX NAV-TIMEGPS sentence, triggering synchronization attempt ~~\n");
+                        gps_process_sync();
+                    }
+                }
+            } else if(serial_buff[rd_idx] == (char)LGW_GPS_NMEA_SYNC_CHAR) {
+                /************************
+                 * Found NMEA sync char *
+                 ************************/
+                /* scan for NMEA end marker (LF = 0x0a) */
+                char* nmea_end_ptr = memchr(&serial_buff[rd_idx],(int)0x0a, (wr_idx - rd_idx));
+
+                if (nmea_end_ptr) {
+                    /* found end marker */
+                    frame_size = nmea_end_ptr - &serial_buff[rd_idx] + 1;
+                    latest_msg = lgw_parse_nmea(&serial_buff[rd_idx], frame_size);
+
+                    if(latest_msg == INVALID || latest_msg == UNKNOWN) {
+                        /* checksum failed */
+                        frame_size = 0;
+                    } else if (latest_msg == NMEA_RMC) { /* Get location from RMC frames */
+                        gps_process_coords();
+                    }
+                }
+            }
+
+            if (frame_size > 0) {
+                /* At this point message is a checksum verified frame
+                   we're processed or ignored. Remove frame from buffer */
+                rd_idx += frame_size;
+                frame_end_idx = rd_idx;
+            } else {
+                rd_idx++;
+            }
+        } /* ...for(rd_idx = 0... */
+
+        if (frame_end_idx) {
+          /* Frames have been processed. Remove bytes to end of last processed frame */
+          memcpy(serial_buff,&serial_buff[frame_end_idx],wr_idx - frame_end_idx);
+          wr_idx -= frame_end_idx;
+        } /* ...for(rd_idx = 0... */
+
+        /* Prevent buffer overflow */
+        if ((sizeof(serial_buff) - wr_idx) < LGW_GPS_MIN_MSG_SIZE) {
+            memcpy(serial_buff,&serial_buff[LGW_GPS_MIN_MSG_SIZE],wr_idx - LGW_GPS_MIN_MSG_SIZE);
+            wr_idx -= LGW_GPS_MIN_MSG_SIZE;
+        }
+    }
+
+    /* clean up before leaving */
+    if (exit_sig == 1) {
+        lgw_gps_disable(gps_tty_dev);
+        lgw_stop();
+    }
+
+    if (com_type == LGW_COM_SPI) {
+        /* Board reset */
+        if (system("./reset_lgw.sh stop") != 0) {
+            printf("ERROR: failed to reset SX1302, check your reset_lgw.sh script\n");
+            exit(EXIT_FAILURE);
+        }
+    }
+
+    printf("\nEnd of test for loragw_gps.c\n");
+    exit(EXIT_SUCCESS);
+}
+
+/* --- EOF ------------------------------------------------------------------ */
diff --git a/libloragw/tst/test_loragw_gps_uart.c b/libloragw/tst/test_loragw_gps_uart.c
new file mode 100644
index 0000000..d831c06
--- /dev/null
+++ b/libloragw/tst/test_loragw_gps_uart.c
@@ -0,0 +1,429 @@
+/*
+ / _____)             _              | |
+( (____  _____ ____ _| |_ _____  ____| |__
+ \____ \| ___ |    (_   _) ___ |/ ___)  _ \
+ _____) ) ____| | | || |_| ____( (___| | | |
+(______/|_____)_|_|_| \__)_____)\____)_| |_|
+  (C)2019 Semtech
+
+Description:
+    Minimum test program for the loragw_gps module
+
+License: Revised BSD License, see LICENSE.TXT file include in the project
+*/
+
+
+/* -------------------------------------------------------------------------- */
+/* --- DEPENDANCIES --------------------------------------------------------- */
+
+/* fix an issue between POSIX and C99 */
+#if __STDC_VERSION__ >= 199901L
+    #define _XOPEN_SOURCE 600
+#else
+    #define _XOPEN_SOURCE 500
+#endif
+
+#include <stdint.h>     /* C99 types */
+#include <stdbool.h>    /* bool type */
+#include <stdio.h>      /* printf */
+#include <string.h>     /* memset */
+#include <signal.h>     /* sigaction */
+#include <stdlib.h>     /* exit */
+#include <unistd.h>     /* read */
+
+#include "loragw_hal.h"
+#include "loragw_gps.h"
+#include "loragw_aux.h"
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE MACROS ------------------------------------------------------- */
+
+#define MATCH(a,b) ( ((int32_t)(a-b)<=1) && ((int32_t)(a-b)>=-1) ) /* tolerate 1µs */
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE CONSTANTS ---------------------------------------------------- */
+
+#define COM_TYPE_DEFAULT LGW_COM_SPI
+#define COM_PATH_DEFAULT "/dev/spidev0.0"
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE VARIABLES ---------------------------------------------------- */
+
+static int exit_sig = 0; /* 1 -> application terminates cleanly (shut down hardware, close open files, etc) */
+static int quit_sig = 0; /* 1 -> application terminates without shutting down the hardware */
+
+struct tref ppm_ref;
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE FUNCTIONS DECLARATION ---------------------------------------- */
+
+static void sig_handler(int sigio);
+static void gps_process_sync(void);
+static void gps_process_coords(void);
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE FUNCTIONS DEFINITION ----------------------------------------- */
+
+void usage(void) {
+    //printf("Library version information: %s\n", lgw_version_info());
+    printf("Available options:\n");
+    printf(" -h print this help\n");
+    printf(" -u        set COM type as USB (default is SPI)\n");
+    printf(" -d <path> COM path to be used to connect the concentrator\n");
+    printf("            => default path (SPI): " COM_PATH_DEFAULT "\n");
+    printf(" -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");
+    printf(" -r <uint> Radio type (1255, 1257, 1250)\n");
+}
+
+static void sig_handler(int sigio) {
+    if (sigio == SIGQUIT) {
+        quit_sig = 1;;
+    } else if ((sigio == SIGINT) || (sigio == SIGTERM)) {
+        exit_sig = 1;
+    }
+}
+
+static void gps_process_sync(void) {
+    /* variables for PPM pulse GPS synchronization */
+    uint32_t ppm_tstamp;
+    struct timespec ppm_gps;
+    struct timespec ppm_utc;
+
+    /* variables for timestamp <-> GPS time conversions */
+    uint32_t x, z;
+    struct timespec y;
+
+    /* get GPS time for synchronization */
+    int i = lgw_gps_get(&ppm_utc, &ppm_gps, NULL, NULL);
+    if (i != LGW_GPS_SUCCESS) {
+        printf("    No valid reference GPS time available, synchronization impossible.\n");
+        return;
+    }
+
+    /* get timestamp for synchronization */
+    i = lgw_get_trigcnt(&ppm_tstamp);
+    if (i != LGW_HAL_SUCCESS) {
+        printf("    Failed to read timestamp, synchronization impossible.\n");
+        return;
+    }
+
+    /* try to update synchronize time reference with the new GPS & timestamp */
+    i = lgw_gps_sync(&ppm_ref, ppm_tstamp, ppm_utc, ppm_gps);
+    if (i != LGW_GPS_SUCCESS) {
+        printf("    Synchronization error.\n");
+        return;
+    }
+
+    /* display result */
+    printf("    * Synchronization successful *\n");
+    printf("    UTC reference time: %lld.%09ld\n", (long long)ppm_ref.utc.tv_sec, ppm_ref.utc.tv_nsec);
+    printf("    GPS reference time: %lld.%09ld\n", (long long)ppm_ref.gps.tv_sec, ppm_ref.gps.tv_nsec);
+    printf("    Internal counter reference value: %u\n", ppm_ref.count_us);
+    printf("    Clock error: %.9f\n", ppm_ref.xtal_err);
+
+    x = ppm_tstamp + 500000;
+
+    /* CNT -> GPS -> CNT */
+    printf("\n");
+    printf("    * Test of timestamp counter <-> GPS value conversion *\n");
+    printf("    Test value: %u\n", x);
+    lgw_cnt2gps(ppm_ref, x, &y);
+    printf("    Conversion to GPS: %lld.%09ld\n", (long long)y.tv_sec, y.tv_nsec);
+    lgw_gps2cnt(ppm_ref, y, &z);
+    printf("    Converted back: %u ==> %dµs\n", z, (int32_t)(z-x));
+    /* Display test result */
+    if (MATCH(x,z)) {
+        printf("    ** PASS **: (SX1302 -> GPS -> SX1302) conversion MATCH\n");
+    } else {
+        printf("    ** FAILED **: (SX1302 -> GPS -> SX1302) conversion MISMATCH\n");
+    }
+
+    /* CNT -> UTC -> CNT */
+    printf("\n");
+    printf("    * Test of timestamp counter <-> UTC value conversion *\n");
+    printf("    Test value: %u\n", x);
+    lgw_cnt2utc(ppm_ref, x, &y);
+    printf("    Conversion to UTC: %lld.%09ld\n", (long long)y.tv_sec, y.tv_nsec);
+    lgw_utc2cnt(ppm_ref, y, &z);
+    printf("    Converted back: %u ==> %dµs\n", z, (int32_t)(z-x));
+    /* Display test result */
+    if (MATCH(x,z)) {
+        printf("    ** PASS **: (SX1302 -> UTC -> SX1302) conversion MATCH\n");
+    } else {
+        printf("    ** FAILED **: (SX1302 -> UTC -> SX1302) conversion MISMATCH\n");
+    }
+}
+
+static void gps_process_coords(void) {
+    /* position variable */
+    struct coord_s coord;
+    struct coord_s gpserr;
+    int    i = lgw_gps_get(NULL, NULL, &coord, &gpserr);
+
+    /* update gateway coordinates */
+    if (i == LGW_GPS_SUCCESS) {
+        printf("\n");
+        printf("# GPS coordinates: latitude %.5f, longitude %.5f, altitude %i m\n", coord.lat, coord.lon, coord.alt);
+        printf("# GPS err:         latitude %.5f, longitude %.5f, altitude %i m\n", gpserr.lat, gpserr.lon, gpserr.alt);
+    }
+}
+
+/* -------------------------------------------------------------------------- */
+/* --- MAIN FUNCTION -------------------------------------------------------- */
+
+int main(int argc, char **argv)
+{
+    /* SPI interfaces */
+    const char com_path_default[] = COM_PATH_DEFAULT;
+    const char * com_path = com_path_default;
+    lgw_com_type_t com_type = COM_TYPE_DEFAULT;
+
+    struct sigaction sigact; /* SIGQUIT&SIGINT&SIGTERM signal handling */
+
+    int i;
+    unsigned int arg_u;
+
+    /* concentrator variables */
+    uint8_t clocksource = 0;
+    lgw_radio_type_t radio_type = LGW_RADIO_TYPE_SX1250;
+    struct lgw_conf_board_s boardconf;
+    struct lgw_conf_rxrf_s rfconf;
+
+    /* serial variables */
+    char serial_buff[128]; /* buffer to receive GPS data */
+    size_t wr_idx = 0;     /* pointer to end of chars in buffer */
+    int gps_tty_dev; /* file descriptor to the serial port of the GNSS module */
+
+    /* NMEA/UBX variables */
+    enum gps_msg latest_msg; /* keep track of latest NMEA/UBX message parsed */
+
+    /* parse command line options */
+    while ((i = getopt (argc, argv, "hk:r:d:u")) != -1) {
+        switch (i) {
+            case 'h':
+                usage();
+                return -1;
+                break;
+            case 'd':
+                if (optarg != NULL) {
+                    com_path = optarg;
+                }
+                break;
+            case 'u':
+                com_type = LGW_COM_USB;
+                break;
+            case 'r': /* <uint> Radio type */
+                i = sscanf(optarg, "%u", &arg_u);
+                if ((i != 1) || ((arg_u != 1255) && (arg_u != 1257) && (arg_u != 1250))) {
+                    printf("ERROR: argument parsing of -r argument. Use -h to print help\n");
+                    return EXIT_FAILURE;
+                } else {
+                    switch (arg_u) {
+                        case 1255:
+                            radio_type = LGW_RADIO_TYPE_SX1255;
+                            break;
+                        case 1257:
+                            radio_type = LGW_RADIO_TYPE_SX1257;
+                            break;
+                        default: /* 1250 */
+                            radio_type = LGW_RADIO_TYPE_SX1250;
+                            break;
+                    }
+                }
+                break;
+            case 'k': /* <uint> Clock Source */
+                i = sscanf(optarg, "%u", &arg_u);
+                if ((i != 1) || (arg_u > 1)) {
+                    printf("ERROR: argument parsing of -k argument. Use -h to print help\n");
+                    return EXIT_FAILURE;
+                } else {
+                    clocksource = (uint8_t)arg_u;
+                }
+                break;
+            default:
+                printf("ERROR: argument parsing\n");
+                usage();
+                exit(EXIT_FAILURE);
+        }
+    }
+
+    /* configure signal handling */
+    sigemptyset(&sigact.sa_mask);
+    sigact.sa_flags = 0;
+    sigact.sa_handler = sig_handler;
+    sigaction(SIGQUIT, &sigact, NULL);
+    sigaction(SIGINT, &sigact, NULL);
+    sigaction(SIGTERM, &sigact, NULL);
+
+    /* Intro message and library information */
+    printf("Beginning of test for loragw_gps.c\n");
+    printf("*** Library version information ***\n%s\n***\n", lgw_version_info());
+
+    if (com_type == LGW_COM_SPI) {
+        /* Board reset */
+        if (system("./reset_lgw.sh start") != 0) {
+            printf("ERROR: failed to reset SX1302, check your reset_lgw.sh script\n");
+            exit(EXIT_FAILURE);
+        }
+    }
+
+    /* Open and configure GPS */
+    i = lgw_gps_enable("/dev/ttySTM1", "ubx7", 0, &gps_tty_dev);
+    if (i != LGW_GPS_SUCCESS) {
+        printf("ERROR: Failed to enable GPS\n");
+        exit(EXIT_FAILURE);
+    }
+
+    /* start concentrator (default conf for IoT SK) */
+    /* board config */
+    memset(&boardconf, 0, sizeof(boardconf));
+    boardconf.lorawan_public = true;
+    boardconf.clksrc = clocksource;
+    boardconf.full_duplex = false;
+    boardconf.com_type = com_type;
+    strncpy(boardconf.com_path, com_path, sizeof boardconf.com_path);
+    boardconf.com_path[sizeof boardconf.com_path - 1] = '\0'; /* ensure string termination */
+    if (lgw_board_setconf(&boardconf) != LGW_HAL_SUCCESS) {
+        printf("ERROR: failed to configure board\n");
+        return EXIT_FAILURE;
+    }
+
+    /* set configuration for RF chains */
+    memset( &rfconf, 0, sizeof rfconf);
+    rfconf.enable = true;
+    rfconf.freq_hz = 868000000;
+    rfconf.rssi_offset = 0.0;
+    rfconf.type = radio_type;
+    rfconf.tx_enable = false;
+    rfconf.single_input_mode = false;
+    if (lgw_rxrf_setconf(0, &rfconf) != LGW_HAL_SUCCESS) {
+        printf("ERROR: failed to configure rxrf 0\n");
+        return EXIT_FAILURE;
+    }
+
+    memset( &rfconf, 0, sizeof rfconf);
+    rfconf.enable = true;
+    rfconf.freq_hz = 868000000;
+    rfconf.rssi_offset = 0.0;
+    rfconf.type = radio_type;
+    rfconf.tx_enable = false;
+    rfconf.single_input_mode = false;
+    if (lgw_rxrf_setconf(1, &rfconf) != LGW_HAL_SUCCESS) {
+        printf("ERROR: failed to configure rxrf 1\n");
+        return EXIT_FAILURE;
+    }
+
+    /* start */
+    if (lgw_start() != LGW_HAL_SUCCESS) {
+        printf("ERROR: IMPOSSIBLE TO START THE GATEWAY\n");
+        exit(EXIT_FAILURE);
+    }
+
+    /* initialize some variables before loop */
+    memset(serial_buff, 0, sizeof serial_buff);
+    memset(&ppm_ref, 0, sizeof ppm_ref);
+
+    /* loop until user action */
+    while ((quit_sig != 1) && (exit_sig != 1)) {
+        size_t rd_idx = 0;
+        size_t frame_end_idx = 0;
+
+        /* blocking non-canonical read on serial port */
+        ssize_t nb_char = read(gps_tty_dev, serial_buff + wr_idx, LGW_GPS_MIN_MSG_SIZE);
+        if (nb_char <= 0) {
+            printf("WARNING: [gps] read() returned value %zd\n", nb_char);
+            continue;
+        }
+        wr_idx += (size_t)nb_char;
+
+        /*******************************************
+         * Scan buffer for UBX/NMEA sync chars and *
+         * attempt to decode frame if one is found *
+         *******************************************/
+        while (rd_idx < wr_idx) {
+            size_t frame_size = 0;
+
+            /* Scan buffer for UBX sync char */
+            if (serial_buff[rd_idx] == (char)LGW_GPS_UBX_SYNC_CHAR) {
+
+                /***********************
+                 * Found UBX sync char *
+                 ***********************/
+                latest_msg = lgw_parse_ubx(&serial_buff[rd_idx], (wr_idx - rd_idx), &frame_size);
+
+                if (frame_size > 0) {
+                    if (latest_msg == INCOMPLETE) {
+                        /* UBX header found but frame appears to be missing bytes */
+                        frame_size = 0;
+                    } else if (latest_msg == INVALID) {
+                        /* message header received but message appears to be corrupted */
+                        printf("WARNING: [gps] could not get a valid message from GPS (no time)\n");
+                        frame_size = 0;
+                    } else if (latest_msg == UBX_NAV_TIMEGPS) {
+                        printf("\n~~ UBX NAV-TIMEGPS sentence, triggering synchronization attempt ~~\n");
+                        gps_process_sync();
+                    }
+                }
+            } else if(serial_buff[rd_idx] == (char)LGW_GPS_NMEA_SYNC_CHAR) {
+                /************************
+                 * Found NMEA sync char *
+                 ************************/
+                /* scan for NMEA end marker (LF = 0x0a) */
+                char* nmea_end_ptr = memchr(&serial_buff[rd_idx],(int)0x0a, (wr_idx - rd_idx));
+
+                if (nmea_end_ptr) {
+                    /* found end marker */
+                    frame_size = nmea_end_ptr - &serial_buff[rd_idx] + 1;
+                    latest_msg = lgw_parse_nmea(&serial_buff[rd_idx], frame_size);
+
+                    if(latest_msg == INVALID || latest_msg == UNKNOWN) {
+                        /* checksum failed */
+                        frame_size = 0;
+                    } else if (latest_msg == NMEA_RMC) { /* Get location from RMC frames */
+                        gps_process_coords();
+                    }
+                }
+            }
+
+            if (frame_size > 0) {
+                /* At this point message is a checksum verified frame
+                   we're processed or ignored. Remove frame from buffer */
+                rd_idx += frame_size;
+                frame_end_idx = rd_idx;
+            } else {
+                rd_idx++;
+            }
+        } /* ...for(rd_idx = 0... */
+
+        if (frame_end_idx) {
+          /* Frames have been processed. Remove bytes to end of last processed frame */
+          memcpy(serial_buff,&serial_buff[frame_end_idx],wr_idx - frame_end_idx);
+          wr_idx -= frame_end_idx;
+        } /* ...for(rd_idx = 0... */
+
+        /* Prevent buffer overflow */
+        if ((sizeof(serial_buff) - wr_idx) < LGW_GPS_MIN_MSG_SIZE) {
+            memcpy(serial_buff,&serial_buff[LGW_GPS_MIN_MSG_SIZE],wr_idx - LGW_GPS_MIN_MSG_SIZE);
+            wr_idx -= LGW_GPS_MIN_MSG_SIZE;
+        }
+    }
+
+    /* clean up before leaving */
+    if (exit_sig == 1) {
+        lgw_gps_disable(gps_tty_dev);
+        lgw_stop();
+    }
+
+    if (com_type == LGW_COM_SPI) {
+        /* Board reset */
+        if (system("./reset_lgw.sh stop") != 0) {
+            printf("ERROR: failed to reset SX1302, check your reset_lgw.sh script\n");
+            exit(EXIT_FAILURE);
+        }
+    }
+
+    printf("\nEnd of test for loragw_gps.c\n");
+    exit(EXIT_SUCCESS);
+}
+
+/* --- EOF ------------------------------------------------------------------ */
diff --git a/packet_forwarder/Makefile b/packet_forwarder/Makefile
index 2325a47..3c8078f 100644
--- a/packet_forwarder/Makefile
+++ b/packet_forwarder/Makefile
@@ -1,7 +1,3 @@
-### get external defined data
-
-include ../target.cfg
-
 ### Application-specific constants
 
 APP_NAME := lora_pkt_fwd
@@ -52,29 +48,6 @@ clean:
 	rm -f $(OBJDIR)/*.o
 	rm -f $(APP_NAME)
 
-ifneq ($(strip $(TARGET_IP)),)
- ifneq ($(strip $(TARGET_DIR)),)
-  ifneq ($(strip $(TARGET_USR)),)
-install:
-	@echo "---- Copying packet_forwarder files to $(TARGET_IP):$(TARGET_DIR)"
-	@ssh $(TARGET_USR)@$(TARGET_IP) "mkdir -p $(TARGET_DIR)"
-	@scp lora_pkt_fwd $(TARGET_USR)@$(TARGET_IP):$(TARGET_DIR)
-install_conf:
-	@echo "---- Copying packet_forwarder conf files to $(TARGET_IP):$(TARGET_DIR)"
-	@ssh $(TARGET_USR)@$(TARGET_IP) "mkdir -p $(TARGET_DIR)"
-	@scp global_conf.json.sx1250.* $(TARGET_USR)@$(TARGET_IP):$(TARGET_DIR)
-	@scp global_conf.json.sx1255.* $(TARGET_USR)@$(TARGET_IP):$(TARGET_DIR)
-	@scp global_conf.json.sx1257.* $(TARGET_USR)@$(TARGET_IP):$(TARGET_DIR)
-  else
-	@echo "ERROR: TARGET_USR is not configured in target.cfg"
-  endif
- else
-	@echo "ERROR: TARGET_DIR is not configured in target.cfg"
- endif
-else
-	@echo "ERROR: TARGET_IP is not configured in target.cfg"
-endif
-
 ### Sub-modules compilation
 
 $(OBJDIR):
diff --git a/packet_forwarder/global_conf.json b/packet_forwarder/global_conf.json
new file mode 100644
index 0000000..90ca127
--- /dev/null
+++ b/packet_forwarder/global_conf.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 867500000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 863000000,
+            "tx_freq_max": 870000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 868500000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 1, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 1, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 1, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_4": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_5": {"enable": true, "radio": 0, "if":  0},   
+        "chan_multiSF_6": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_7": {"enable": true, "radio": 0, "if":  400000},
+	"chan_FSK":       {"enable": true, "radio": 1, "if":  300000, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if": -200000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "eu1.loriot.io",
+        "serv_port_up": 1780,
+        "serv_port_down": 1780,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 0,	
+        "beacon_freq_hz": 869525000,
+        "beacon_freq_nb": 1,
+        "beacon_freq_step": 0,
+        "beacon_datarate": 9,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/global_conf.json.sx1250.AS923.USB b/packet_forwarder/global_conf.json.sx1250.AS923.USB
deleted file mode 100644
index fe36084..0000000
--- a/packet_forwarder/global_conf.json.sx1250.AS923.USB
+++ /dev/null
@@ -1,122 +0,0 @@
-{
-    "SX130x_conf": {
-        "com_type": "USB",
-        "com_path": "/dev/ttyACM0",
-        "lorawan_public": true,
-        "clksrc": 0,
-        "antenna_gain": 0, /* antenna gain, in dBi */
-        "full_duplex": false,
-        "fine_timestamp": {
-            "enable": false,
-            "mode": "all_sf" /* high_capacity or all_sf */
-        },
-        "sx1261_conf": {
-            "rssi_offset": 0, /* dB */
-            "spectral_scan": {
-                "enable": false,
-                "freq_start": 922000000,
-                "nb_chan": 8,
-                "nb_scan": 2000,
-                "pace_s": 10
-            },
-            "lbt": {
-                "enable": true,
-                "rssi_target": -80, /* dBm */
-                "channels":[ /* 16 channels maximum */
-                    { "freq_hz": 920600000, "bandwidth": 125000, "scan_time_us": 5000, "transmit_time_ms": 4000 },
-                    { "freq_hz": 920800000, "bandwidth": 125000, "scan_time_us": 5000, "transmit_time_ms": 4000 },
-                    { "freq_hz": 921000000, "bandwidth": 125000, "scan_time_us": 5000, "transmit_time_ms": 4000 },
-                    { "freq_hz": 921200000, "bandwidth": 125000, "scan_time_us": 5000, "transmit_time_ms": 4000 },
-                    { "freq_hz": 921400000, "bandwidth": 125000, "scan_time_us": 5000, "transmit_time_ms": 4000 },
-                    { "freq_hz": 921600000, "bandwidth": 125000, "scan_time_us": 5000, "transmit_time_ms": 4000 },
-                    { "freq_hz": 921800000, "bandwidth": 125000, "scan_time_us": 5000, "transmit_time_ms": 4000 },
-                    { "freq_hz": 923200000, "bandwidth": 125000, "scan_time_us": 5000, "transmit_time_ms": 4000 },
-                    { "freq_hz": 923400000, "bandwidth": 125000, "scan_time_us": 5000, "transmit_time_ms": 4000 }
-                ]
-            }
-        },
-        "radio_0": {
-            "enable": true,
-            "type": "SX1250",
-            "freq": 922300000,
-            "rssi_offset": -215.4,
-            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
-            "tx_enable": true,
-            "tx_freq_min": 920000000,
-            "tx_freq_max": 924000000,
-            "tx_gain_lut":[
-                {"rf_power": 0, "pa_gain": 0, "pwr_idx": 0},
-                {"rf_power": 12, "pa_gain": 0, "pwr_idx": 15},
-                {"rf_power": 13, "pa_gain": 0, "pwr_idx": 16},
-                {"rf_power": 14, "pa_gain": 0, "pwr_idx": 17},
-                {"rf_power": 15, "pa_gain": 0, "pwr_idx": 19},
-                {"rf_power": 16, "pa_gain": 0, "pwr_idx": 20},
-                {"rf_power": 17, "pa_gain": 0, "pwr_idx": 22},
-                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 1},
-                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 2},
-                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 3},
-                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 4},
-                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 5},
-                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 6},
-                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 9}
-            ]
-        },
-        "radio_1": {
-            "enable": true,
-            "type": "SX1250",
-            "freq": 923100000,
-            "rssi_offset": -215.4,
-            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
-            "tx_enable": false
-        },
-        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
-        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},
-        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},
-        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},
-        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},
-        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},
-        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},
-        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},
-        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
-        "chan_Lora_std":  {"enable": true, "radio": 0, "if":  300000, "bandwidth": 500000, "spread_factor": 8,
-                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1},
-        "chan_FSK":       {"enable": false, "radio": 1, "if":  300000, "bandwidth": 125000, "datarate": 50000}
-    },
-
-    "gateway_conf": {
-        "gateway_ID": "AA555A0000000000",
-        /* change with default server address/ports */
-        "server_address": "localhost",
-        "serv_port_up": 1730,
-        "serv_port_down": 1730,
-        /* adjust the following parameters for your network */
-        "keepalive_interval": 10,
-        "stat_interval": 30,
-        "push_timeout_ms": 100,
-        /* forward only valid packets */
-        "forward_crc_valid": true,
-        "forward_crc_error": false,
-        "forward_crc_disabled": false,
-        /* GPS configuration */
-        "gps_tty_path": "/dev/ttyS0",
-        /* GPS reference coordinates */
-        "ref_latitude": 0.0,
-        "ref_longitude": 0.0,
-        "ref_altitude": 0,
-        /* Beaconing parameters */
-        "beacon_period": 0, /* disable class B beacon */
-        "beacon_freq_hz": 923400000,
-        "beacon_datarate": 9,
-        "beacon_bw_hz": 125000,
-        "beacon_power": 14,
-        "beacon_infodesc": 0
-    },
-
-    "debug_conf": {
-        "ref_payload":[
-            {"id": "0xCAFE1234"},
-            {"id": "0xCAFE2345"}
-        ],
-        "log_file": "loragw_hal.log"
-    }
-}
diff --git a/packet_forwarder/global_conf.json.sx1250.CN490.USB b/packet_forwarder/global_conf.json.sx1250.CN490.USB
deleted file mode 100644
index dacc873..0000000
--- a/packet_forwarder/global_conf.json.sx1250.CN490.USB
+++ /dev/null
@@ -1,126 +0,0 @@
-{
-    "SX130x_conf": {
-        "com_type": "USB",
-        "com_path": "/dev/ttyACM0",
-        "lorawan_public": true,
-        "clksrc": 0,
-        "antenna_gain": 0, /* antenna gain, in dBi */
-        "full_duplex": false,
-        "fine_timestamp": {
-            "enable": false,
-            "mode": "all_sf" /* high_capacity or all_sf */
-        },
-        "sx1261_conf": {
-            "rssi_offset": 0, /* dB */
-            "spectral_scan": {
-                "enable": false,
-                "freq_start": 473100000,
-                "nb_chan": 8,
-                "nb_scan": 2000,
-                "pace_s": 10
-            },
-            "lbt": {
-                "enable": false,
-                "rssi_target": -70, /* dBm */
-                "channels":[ /* 16 channels maximum */
-                    { "freq_hz": 500300000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400 },
-                    { "freq_hz": 500500000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400 },
-                    { "freq_hz": 500700000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400 },
-                    { "freq_hz": 500900000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400 },
-                    { "freq_hz": 501100000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400 },
-                    { "freq_hz": 501300000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400 },
-                    { "freq_hz": 501500000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400 },
-                    { "freq_hz": 501700000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400 },
-                    { "freq_hz": 505300000, "bandwidth": 125000, "scan_time_us": 5000, "transmit_time_ms": 4000 }
-                ]
-            }
-        },
-        "radio_0": {
-            "enable": true,
-            "type": "SX1250",
-            "single_input_mode": true,
-            "freq": 473400000,
-            "rssi_offset": -218.0,
-            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
-            "tx_enable": true,
-            "tx_freq_min": 500000000,
-            "tx_freq_max": 510000000,
-            "tx_gain_lut":[
-                {"rf_power": 3, "pa_gain": 0, "pwr_idx":  7},
-                {"rf_power": 4, "pa_gain": 0, "pwr_idx":  8},
-                {"rf_power": 5, "pa_gain": 0, "pwr_idx":  9},
-                {"rf_power": 6, "pa_gain": 1, "pwr_idx":  10},
-                {"rf_power": 7, "pa_gain": 1, "pwr_idx":  11},
-                {"rf_power": 8, "pa_gain": 1, "pwr_idx":  12},
-                {"rf_power": 9, "pa_gain": 1, "pwr_idx":  13},
-                {"rf_power": 10, "pa_gain": 1, "pwr_idx": 14},
-                {"rf_power": 11, "pa_gain": 1, "pwr_idx": 15},
-                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 16},
-                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 17},
-                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 18},
-                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 19},
-                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 20},
-                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 21},
-                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 22}
-            ]
-        },
-        "radio_1": {
-            "enable": true,
-            "type": "SX1250",
-            "single_input_mode": true,
-            "freq": 474200000,
-            "rssi_offset": -218.0,
-            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
-            "tx_enable": false
-        },
-        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
-        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},
-        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},
-        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},
-        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},
-        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},
-        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},
-        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},
-        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
-        "chan_Lora_std":  {"enable": true, "radio": 1, "if": -200000, "bandwidth": 250000, "spread_factor": 7,
-                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1},
-        "chan_FSK":       {"enable": true, "radio": 1, "if":  300000, "bandwidth": 125000, "datarate": 50000}
-    },
-
-    "gateway_conf": {
-        "gateway_ID": "AA555A0000000000",
-        /* change with default server address/ports */
-        "server_address": "localhost",
-        "serv_port_up": 1730,
-        "serv_port_down": 1730,
-        /* adjust the following parameters for your network */
-        "keepalive_interval": 10,
-        "stat_interval": 30,
-        "push_timeout_ms": 100,
-        /* forward only valid packets */
-        "forward_crc_valid": true,
-        "forward_crc_error": false,
-        "forward_crc_disabled": false,
-        /* GPS configuration */
-        "gps_tty_path": "/dev/ttyS0",
-        /* GPS reference coordinates */
-        "ref_latitude": 0.0,
-        "ref_longitude": 0.0,
-        "ref_altitude": 0,
-        /* Beaconing parameters */
-        "beacon_period": 0,
-        "beacon_freq_hz": 500000000,
-        "beacon_datarate": 9,
-        "beacon_bw_hz": 125000,
-        "beacon_power": 14,
-        "beacon_infodesc": 0
-    },
-
-    "debug_conf": {
-        "ref_payload":[
-            {"id": "0xCAFE1234"},
-            {"id": "0xCAFE2345"}
-        ],
-        "log_file": "loragw_hal.log"
-    }
-}
diff --git a/packet_forwarder/global_conf.json.sx1250.EU868 b/packet_forwarder/global_conf.json.sx1250.EU868
deleted file mode 100644
index 063c931..0000000
--- a/packet_forwarder/global_conf.json.sx1250.EU868
+++ /dev/null
@@ -1,126 +0,0 @@
-{
-    "SX130x_conf": {
-        "com_type": "SPI",
-        "com_path": "/dev/spidev0.0",
-        "lorawan_public": true,
-        "clksrc": 0,
-        "antenna_gain": 0, /* antenna gain, in dBi */
-        "full_duplex": false,
-        "fine_timestamp": {
-            "enable": false,
-            "mode": "all_sf" /* high_capacity or all_sf */
-        },
-        "sx1261_conf": {
-            "spi_path": "/dev/spidev0.1",
-            "rssi_offset": 0, /* dB */
-            "spectral_scan": {
-                "enable": false,
-                "freq_start": 867100000,
-                "nb_chan": 8,
-                "nb_scan": 2000,
-                "pace_s": 10
-            },
-            "lbt": {
-                "enable": false,
-                "rssi_target": -70, /* dBm */
-                "channels":[ /* 16 channels maximum */
-                    { "freq_hz": 867100000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400 },
-                    { "freq_hz": 867300000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400 },
-                    { "freq_hz": 867500000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400 },
-                    { "freq_hz": 867700000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400 },
-                    { "freq_hz": 867900000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400 },
-                    { "freq_hz": 868100000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400 },
-                    { "freq_hz": 868300000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400 },
-                    { "freq_hz": 868500000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400 },
-                    { "freq_hz": 869525000, "bandwidth": 125000, "scan_time_us": 5000, "transmit_time_ms": 4000 },
-                    { "freq_hz": 868300000, "bandwidth": 250000, "scan_time_us": 128,  "transmit_time_ms": 400 }
-                ]
-            }
-        },
-        "radio_0": {
-            "enable": true,
-            "type": "SX1250",
-            "freq": 867500000,
-            "rssi_offset": -215.4,
-            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
-            "tx_enable": true,
-            "tx_freq_min": 863000000,
-            "tx_freq_max": 870000000,
-            "tx_gain_lut":[
-                {"rf_power": 12, "pa_gain": 0, "pwr_idx": 15},
-                {"rf_power": 13, "pa_gain": 0, "pwr_idx": 16},
-                {"rf_power": 14, "pa_gain": 0, "pwr_idx": 17},
-                {"rf_power": 15, "pa_gain": 0, "pwr_idx": 19},
-                {"rf_power": 16, "pa_gain": 0, "pwr_idx": 20},
-                {"rf_power": 17, "pa_gain": 0, "pwr_idx": 22},
-                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 1},
-                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 2},
-                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 3},
-                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 4},
-                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 5},
-                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 6},
-                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 7},
-                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 9},
-                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 11},
-                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 14}
-            ]
-        },
-        "radio_1": {
-            "enable": true,
-            "type": "SX1250",
-            "freq": 868500000,
-            "rssi_offset": -215.4,
-            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
-            "tx_enable": false
-        },
-        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
-        "chan_multiSF_0": {"enable": true, "radio": 1, "if": -400000},
-        "chan_multiSF_1": {"enable": true, "radio": 1, "if": -200000},
-        "chan_multiSF_2": {"enable": true, "radio": 1, "if":  0},
-        "chan_multiSF_3": {"enable": true, "radio": 0, "if": -400000},
-        "chan_multiSF_4": {"enable": true, "radio": 0, "if": -200000},
-        "chan_multiSF_5": {"enable": true, "radio": 0, "if":  0},
-        "chan_multiSF_6": {"enable": true, "radio": 0, "if":  200000},
-        "chan_multiSF_7": {"enable": true, "radio": 0, "if":  400000},
-        "chan_Lora_std":  {"enable": true, "radio": 1, "if": -200000, "bandwidth": 250000, "spread_factor": 7,
-                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1},
-        "chan_FSK":       {"enable": true, "radio": 1, "if":  300000, "bandwidth": 125000, "datarate": 50000}
-    },
-
-    "gateway_conf": {
-        "gateway_ID": "AA555A0000000000",
-        /* change with default server address/ports */
-        "server_address": "localhost",
-        "serv_port_up": 1730,
-        "serv_port_down": 1730,
-        /* adjust the following parameters for your network */
-        "keepalive_interval": 10,
-        "stat_interval": 30,
-        "push_timeout_ms": 100,
-        /* forward only valid packets */
-        "forward_crc_valid": true,
-        "forward_crc_error": false,
-        "forward_crc_disabled": false,
-        /* GPS configuration */
-        "gps_tty_path": "/dev/ttyS0",
-        /* GPS reference coordinates */
-        "ref_latitude": 0.0,
-        "ref_longitude": 0.0,
-        "ref_altitude": 0,
-        /* Beaconing parameters */
-        "beacon_period": 0,
-        "beacon_freq_hz": 869525000,
-        "beacon_datarate": 9,
-        "beacon_bw_hz": 125000,
-        "beacon_power": 14,
-        "beacon_infodesc": 0
-    },
-
-    "debug_conf": {
-        "ref_payload":[
-            {"id": "0xCAFE1234"},
-            {"id": "0xCAFE2345"}
-        ],
-        "log_file": "loragw_hal.log"
-    }
-}
diff --git a/packet_forwarder/global_conf.json.sx1250.EU868.USB b/packet_forwarder/global_conf.json.sx1250.EU868.USB
deleted file mode 100644
index c654751..0000000
--- a/packet_forwarder/global_conf.json.sx1250.EU868.USB
+++ /dev/null
@@ -1,125 +0,0 @@
-{
-    "SX130x_conf": {
-        "com_type": "USB",
-        "com_path": "/dev/ttyACM0",
-        "lorawan_public": true,
-        "clksrc": 0,
-        "antenna_gain": 0, /* antenna gain, in dBi */
-        "full_duplex": false,
-        "fine_timestamp": {
-            "enable": false,
-            "mode": "all_sf" /* high_capacity or all_sf */
-        },
-        "sx1261_conf": {
-            "rssi_offset": 0, /* dB */
-            "spectral_scan": {
-                "enable": false,
-                "freq_start": 867100000,
-                "nb_chan": 8,
-                "nb_scan": 2000,
-                "pace_s": 10
-            },
-            "lbt": {
-                "enable": false,
-                "rssi_target": -70, /* dBm */
-                "channels":[ /* 16 channels maximum */
-                    {"freq_hz": 867100000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400},
-                    {"freq_hz": 867300000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400},
-                    {"freq_hz": 867500000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400},
-                    {"freq_hz": 867700000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400},
-                    {"freq_hz": 867900000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400},
-                    {"freq_hz": 868100000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400},
-                    {"freq_hz": 868300000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400},
-                    {"freq_hz": 868500000, "bandwidth": 125000, "scan_time_us": 128,  "transmit_time_ms": 400},
-                    {"freq_hz": 869525000, "bandwidth": 125000, "scan_time_us": 5000, "transmit_time_ms": 4000},
-                    {"freq_hz": 868300000, "bandwidth": 250000, "scan_time_us": 128,  "transmit_time_ms": 400}
-                ]
-            }
-        },
-        "radio_0": {
-            "enable": true,
-            "type": "SX1250",
-            "freq": 867500000,
-            "rssi_offset": -215.4,
-            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
-            "tx_enable": true,
-            "tx_freq_min": 863000000,
-            "tx_freq_max": 870000000,
-            "tx_gain_lut":[
-                {"rf_power": 12, "pa_gain": 0, "pwr_idx": 15},
-                {"rf_power": 13, "pa_gain": 0, "pwr_idx": 16},
-                {"rf_power": 14, "pa_gain": 0, "pwr_idx": 17},
-                {"rf_power": 15, "pa_gain": 0, "pwr_idx": 19},
-                {"rf_power": 16, "pa_gain": 0, "pwr_idx": 20},
-                {"rf_power": 17, "pa_gain": 0, "pwr_idx": 22},
-                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 1},
-                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 2},
-                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 3},
-                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 4},
-                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 5},
-                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 6},
-                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 7},
-                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 9},
-                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 11},
-                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 14}
-            ]
-        },
-        "radio_1": {
-            "enable": true,
-            "type": "SX1250",
-            "freq": 868500000,
-            "rssi_offset": -215.4,
-            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
-            "tx_enable": false
-        },
-        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
-        "chan_multiSF_0": {"enable": true, "radio": 1, "if": -400000},
-        "chan_multiSF_1": {"enable": true, "radio": 1, "if": -200000},
-        "chan_multiSF_2": {"enable": true, "radio": 1, "if":  0},
-        "chan_multiSF_3": {"enable": true, "radio": 0, "if": -400000},
-        "chan_multiSF_4": {"enable": true, "radio": 0, "if": -200000},
-        "chan_multiSF_5": {"enable": true, "radio": 0, "if":  0},
-        "chan_multiSF_6": {"enable": true, "radio": 0, "if":  200000},
-        "chan_multiSF_7": {"enable": true, "radio": 0, "if":  400000},
-        "chan_Lora_std":  {"enable": true, "radio": 1, "if": -200000, "bandwidth": 250000, "spread_factor": 7,
-                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1},
-        "chan_FSK":       {"enable": true, "radio": 1, "if":  300000, "bandwidth": 125000, "datarate": 50000}
-    },
-
-    "gateway_conf": {
-        "gateway_ID": "AA555A0000000000",
-        /* change with default server address/ports */
-        "server_address": "localhost",
-        "serv_port_up": 1730,
-        "serv_port_down": 1730,
-        /* adjust the following parameters for your network */
-        "keepalive_interval": 10,
-        "stat_interval": 30,
-        "push_timeout_ms": 100,
-        /* forward only valid packets */
-        "forward_crc_valid": true,
-        "forward_crc_error": false,
-        "forward_crc_disabled": false,
-        /* GPS configuration */
-        "gps_tty_path": "/dev/ttyS0",
-        /* GPS reference coordinates */
-        "ref_latitude": 0.0,
-        "ref_longitude": 0.0,
-        "ref_altitude": 0,
-        /* Beaconing parameters */
-        "beacon_period": 0,
-        "beacon_freq_hz": 869525000,
-        "beacon_datarate": 9,
-        "beacon_bw_hz": 125000,
-        "beacon_power": 14,
-        "beacon_infodesc": 0
-    },
-
-    "debug_conf": {
-        "ref_payload":[
-            {"id": "0xCAFE1234"},
-            {"id": "0xCAFE2345"}
-        ],
-        "log_file": "loragw_hal.log"
-    }
-}
diff --git a/packet_forwarder/global_conf.json.sx1250.US915 b/packet_forwarder/global_conf.json.sx1250.US915
deleted file mode 100644
index 04434bf..0000000
--- a/packet_forwarder/global_conf.json.sx1250.US915
+++ /dev/null
@@ -1,113 +0,0 @@
-{
-    "SX130x_conf": {
-        "com_type": "SPI",
-        "com_path": "/dev/spidev0.0",
-        "lorawan_public": true,
-        "clksrc": 0,
-        "antenna_gain": 0, /* antenna gain, in dBi */
-        "full_duplex": false,
-        "fine_timestamp": {
-            "enable": false,
-            "mode": "all_sf" /* high_capacity or all_sf */
-        },
-        "sx1261_conf": {
-            "spi_path": "/dev/spidev0.1",
-            "rssi_offset": 0, /* dB */
-            "spectral_scan": {
-                "enable": false,
-                "freq_start": 903900000,
-                "nb_chan": 8,
-                "nb_scan": 2000,
-                "pace_s": 10
-            },
-            "lbt": {
-                "enable": false /* LBT for 500 Khz channels is not supported */
-            }
-        },
-        "radio_0": {
-            "enable": true,
-            "type": "SX1250",
-            "freq": 904300000,
-            "rssi_offset": -215.4,
-            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
-            "tx_enable": true,
-            "tx_freq_min": 923000000,
-            "tx_freq_max": 928000000,
-            "tx_gain_lut":[
-                {"rf_power": 12, "pa_gain": 0, "pwr_idx": 15},
-                {"rf_power": 13, "pa_gain": 0, "pwr_idx": 16},
-                {"rf_power": 14, "pa_gain": 0, "pwr_idx": 17},
-                {"rf_power": 15, "pa_gain": 0, "pwr_idx": 19},
-                {"rf_power": 16, "pa_gain": 0, "pwr_idx": 20},
-                {"rf_power": 17, "pa_gain": 0, "pwr_idx": 22},
-                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 1},
-                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 2},
-                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 3},
-                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 4},
-                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 5},
-                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 6},
-                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 7},
-                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 9},
-                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 11},
-                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 14}
-            ]
-        },
-        "radio_1": {
-            "enable": true,
-            "type": "SX1250",
-            "freq": 905000000,
-            "rssi_offset": -215.4,
-            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
-            "tx_enable": false
-        },
-        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
-        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},  /* Freq : 903.9 MHz*/
-        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},  /* Freq : 904.1 MHz*/
-        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},       /* Freq : 904.3 MHz*/
-        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},  /* Freq : 904.5 MHz*/
-        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},  /* Freq : 904.7 MHz*/
-        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},  /* Freq : 904.9 MHz*/
-        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},  /* Freq : 905.1 MHz*/
-        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},  /* Freq : 905.3 MHz*/
-        "chan_Lora_std":  {"enable": true, "radio": 0, "if":  300000, "bandwidth": 500000, "spread_factor": 8,						/* Freq : 904.6 MHz*/
-                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1},
-        "chan_FSK":       {"enable": false, "radio": 1, "if":  300000, "bandwidth": 125000, "datarate": 50000}						/* Freq : 868.8 MHz*/
-    },
-
-    "gateway_conf": {
-        "gateway_ID": "AA555A0000000000",
-        /* change with default server address/ports */
-        "server_address": "localhost",
-        "serv_port_up": 1730,
-        "serv_port_down": 1730,
-        /* adjust the following parameters for your network */
-        "keepalive_interval": 10,
-        "stat_interval": 30,
-        "push_timeout_ms": 100,
-        /* forward only valid packets */
-        "forward_crc_valid": true,
-        "forward_crc_error": false,
-        "forward_crc_disabled": false,
-        /* GPS configuration */
-        "gps_tty_path": "/dev/ttyS0",
-        /* GPS reference coordinates */
-        "ref_latitude": 0.0,
-        "ref_longitude": 0.0,
-        "ref_altitude": 0,
-        /* Beaconing parameters */
-        "beacon_period": 0, /* disable class B beacon */
-        "beacon_freq_hz": 869525000,
-        "beacon_datarate": 9,
-        "beacon_bw_hz": 125000,
-        "beacon_power": 14,
-        "beacon_infodesc": 0
-    },
-
-    "debug_conf": {
-        "ref_payload":[
-            {"id": "0xCAFE1234"},
-            {"id": "0xCAFE2345"}
-        ],
-        "log_file": "loragw_hal.log"
-    }
-}
diff --git a/packet_forwarder/global_conf.json.sx1250.US915.USB b/packet_forwarder/global_conf.json.sx1250.US915.USB
deleted file mode 100644
index ec28fa3..0000000
--- a/packet_forwarder/global_conf.json.sx1250.US915.USB
+++ /dev/null
@@ -1,112 +0,0 @@
-{
-    "SX130x_conf": {
-        "com_type": "USB",
-        "com_path": "/dev/ttyACM0",
-        "lorawan_public": true,
-        "clksrc": 0,
-        "antenna_gain": 0, /* antenna gain, in dBi */
-        "full_duplex": false,
-        "fine_timestamp": {
-            "enable": false,
-            "mode": "all_sf" /* high_capacity or all_sf */
-        },
-        "sx1261_conf": {
-            "rssi_offset": 0, /* dB */
-            "spectral_scan": {
-                "enable": false,
-                "freq_start": 903900000,
-                "nb_chan": 8,
-                "nb_scan": 2000,
-                "pace_s": 10
-            },
-            "lbt": {
-                "enable": false /* LBT for 500 Khz channels is not supported */
-            }
-        },
-        "radio_0": {
-            "enable": true,
-            "type": "SX1250",
-            "freq": 904300000,
-            "rssi_offset": -215.4,
-            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
-            "tx_enable": true,
-            "tx_freq_min": 923000000,
-            "tx_freq_max": 928000000,
-            "tx_gain_lut":[
-                {"rf_power": 12, "pa_gain": 0, "pwr_idx": 15},
-                {"rf_power": 13, "pa_gain": 0, "pwr_idx": 16},
-                {"rf_power": 14, "pa_gain": 0, "pwr_idx": 17},
-                {"rf_power": 15, "pa_gain": 0, "pwr_idx": 19},
-                {"rf_power": 16, "pa_gain": 0, "pwr_idx": 20},
-                {"rf_power": 17, "pa_gain": 0, "pwr_idx": 22},
-                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 1},
-                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 2},
-                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 3},
-                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 4},
-                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 5},
-                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 6},
-                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 7},
-                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 9},
-                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 11},
-                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 14}
-            ]
-        },
-        "radio_1": {
-            "enable": true,
-            "type": "SX1250",
-            "freq": 905000000,
-            "rssi_offset": -215.4,
-            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
-            "tx_enable": false
-        },
-        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
-        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},  /* Freq : 903.9 MHz*/
-        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},  /* Freq : 904.1 MHz*/
-        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},       /* Freq : 904.3 MHz*/
-        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},  /* Freq : 904.5 MHz*/
-        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},  /* Freq : 904.7 MHz*/
-        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},  /* Freq : 904.9 MHz*/
-        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},  /* Freq : 905.1 MHz*/
-        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},  /* Freq : 905.3 MHz*/
-        "chan_Lora_std":  {"enable": true, "radio": 0, "if":  300000, "bandwidth": 500000, "spread_factor": 8,						/* Freq : 904.6 MHz*/
-                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1},
-        "chan_FSK":       {"enable": false, "radio": 1, "if":  300000, "bandwidth": 125000, "datarate": 50000}						/* Freq : 868.8 MHz*/
-    },
-
-    "gateway_conf": {
-        "gateway_ID": "AA555A0000000000",
-        /* change with default server address/ports */
-        "server_address": "localhost",
-        "serv_port_up": 1730,
-        "serv_port_down": 1730,
-        /* adjust the following parameters for your network */
-        "keepalive_interval": 10,
-        "stat_interval": 30,
-        "push_timeout_ms": 100,
-        /* forward only valid packets */
-        "forward_crc_valid": true,
-        "forward_crc_error": false,
-        "forward_crc_disabled": false,
-        /* GPS configuration */
-        "gps_tty_path": "/dev/ttyS0",
-        /* GPS reference coordinates */
-        "ref_latitude": 0.0,
-        "ref_longitude": 0.0,
-        "ref_altitude": 0,
-        /* Beaconing parameters */
-        "beacon_period": 0, /* disable class B beacon */
-        "beacon_freq_hz": 869525000,
-        "beacon_datarate": 9,
-        "beacon_bw_hz": 125000,
-        "beacon_power": 14,
-        "beacon_infodesc": 0
-    },
-
-    "debug_conf": {
-        "ref_payload":[
-            {"id": "0xCAFE1234"},
-            {"id": "0xCAFE2345"}
-        ],
-        "log_file": "loragw_hal.log"
-    }
-}
diff --git a/packet_forwarder/global_conf.json.sx1255.CN490.full-duplex b/packet_forwarder/global_conf.json.sx1255.CN490.full-duplex
deleted file mode 100644
index 91cb550..0000000
--- a/packet_forwarder/global_conf.json.sx1255.CN490.full-duplex
+++ /dev/null
@@ -1,89 +0,0 @@
-{
-    "SX130x_conf": {
-        "com_type": "SPI",
-        "com_path": "/dev/spidev0.0",
-        "lorawan_public": true,
-        "clksrc": 0,
-        "antenna_gain": 0, /* antenna gain, in dBi */
-        "full_duplex": true,
-        "radio_0": {
-            "enable": true,
-            "type": "SX1255",
-            "freq": 472000000,
-            "rssi_offset": -203.0,
-            "rssi_tcomp": {"coeff_a": 0.00, "coeff_b": 0.00, "coeff_c": -39.78, "coeff_d": 1349.50, "coeff_e": 0.00},
-            "tx_enable": true,
-            "tx_freq_min": 500000000,
-            "tx_freq_max": 510000000,
-            "tx_gain_lut":[
-                {"rf_power": 10, "pa_gain": 1, "dac_gain": 1, "mix_gain":  9, "dig_gain": 0},
-                {"rf_power": 12, "pa_gain": 1, "dac_gain": 3, "mix_gain":  7, "dig_gain": 0},
-                {"rf_power": 13, "pa_gain": 1, "dac_gain": 1, "mix_gain": 11, "dig_gain": 1},
-                {"rf_power": 14, "pa_gain": 1, "dac_gain": 0, "mix_gain": 12, "dig_gain": 0},
-                {"rf_power": 15, "pa_gain": 1, "dac_gain": 0, "mix_gain":  9, "dig_gain": 0},
-                {"rf_power": 16, "pa_gain": 1, "dac_gain": 1, "mix_gain": 12, "dig_gain": 2},
-                {"rf_power": 17, "pa_gain": 1, "dac_gain": 1, "mix_gain": 11, "dig_gain": 0},
-                {"rf_power": 18, "pa_gain": 1, "dac_gain": 1, "mix_gain": 11, "dig_gain": 1},
-                {"rf_power": 20, "pa_gain": 1, "dac_gain": 2, "mix_gain": 10, "dig_gain": 0},
-                {"rf_power": 21, "pa_gain": 1, "dac_gain": 0, "mix_gain": 13, "dig_gain": 0}
-            ]
-        },
-        "radio_1": {
-            "enable": true,
-            "type": "SX1255",
-            "freq": 473000000,
-            "rssi_offset": -205.5,
-            "rssi_tcomp": {"coeff_a": 0.00, "coeff_b": 0.00, "coeff_c": 9.97, "coeff_d": -2748.33, "coeff_e": 0.00},
-            "tx_enable": false
-        },
-        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
-        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},
-        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},
-        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},
-        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},
-        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},
-        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},
-        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},
-        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
-        "chan_Lora_std":  {"enable": true, "radio": 1, "if": -200000, "bandwidth": 250000, "spread_factor": 7,
-                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1},
-        "chan_FSK":       {"enable": true, "radio": 1, "if":  300000, "bandwidth": 125000, "datarate": 50000}
-    },
-
-    "gateway_conf": {
-        "gateway_ID": "AA555A0000000000",
-        /* change with default server address/ports */
-        "server_address": "localhost",
-        "serv_port_up": 1730,
-        "serv_port_down": 1730,
-        /* adjust the following parameters for your network */
-        "keepalive_interval": 10,
-        "stat_interval": 30,
-        "push_timeout_ms": 100,
-        /* forward only valid packets */
-        "forward_crc_valid": true,
-        "forward_crc_error": false,
-        "forward_crc_disabled": false,
-        /* GPS configuration */
-        "gps_tty_path": "/dev/ttyS0",
-        /* GPS reference coordinates */
-        "ref_latitude": 0.0,
-        "ref_longitude": 0.0,
-        "ref_altitude": 0,
-        /* Beaconing parameters */
-        "beacon_period": 0,
-        "beacon_freq_hz": 869525000,
-        "beacon_datarate": 9,
-        "beacon_bw_hz": 125000,
-        "beacon_power": 14,
-        "beacon_infodesc": 0
-    },
-
-    "debug_conf": {
-        "ref_payload":[
-            {"id": "0xCAFE1234"},
-            {"id": "0xCAFE2345"}
-        ],
-        "log_file": "loragw_hal.log"
-    }
-}
diff --git a/packet_forwarder/global_conf.json.sx1257.EU868 b/packet_forwarder/global_conf.json.sx1257.EU868
deleted file mode 100644
index 70a4367..0000000
--- a/packet_forwarder/global_conf.json.sx1257.EU868
+++ /dev/null
@@ -1,95 +0,0 @@
-{
-    "SX130x_conf": {
-        "com_type": "SPI",
-        "com_path": "/dev/spidev0.0",
-        "lorawan_public": true,
-        "clksrc": 0,
-        "antenna_gain": 0, /* antenna gain, in dBi */
-        "full_duplex": false,
-        "radio_0": {
-            "enable": true,
-            "type": "SX1257",
-            "freq": 867500000,
-            "rssi_offset": -196.0,
-            "rssi_tcomp": {"coeff_a": -0.006, "coeff_b": 0.789, "coeff_c": -14.992, "coeff_d": 1988.572, "coeff_e": 105236.996},
-            "tx_enable": true,
-            "tx_freq_min": 863000000,
-            "tx_freq_max": 870000000,
-            "tx_gain_lut":[
-                {"rf_power": -6, "pa_gain": 0, "dac_gain": 3, "mix_gain":  8, "dig_gain": 0},
-                {"rf_power": -3, "pa_gain": 0, "dac_gain": 3, "mix_gain": 10, "dig_gain": 0},
-                {"rf_power":  0, "pa_gain": 0, "dac_gain": 3, "mix_gain": 12, "dig_gain": 0},
-                {"rf_power":  3, "pa_gain": 1, "dac_gain": 3, "mix_gain":  8, "dig_gain": 0},
-                {"rf_power":  6, "pa_gain": 1, "dac_gain": 3, "mix_gain": 10, "dig_gain": 0},
-                {"rf_power": 10, "pa_gain": 1, "dac_gain": 3, "mix_gain": 12, "dig_gain": 0},
-                {"rf_power": 11, "pa_gain": 1, "dac_gain": 3, "mix_gain": 13, "dig_gain": 0},
-                {"rf_power": 12, "pa_gain": 2, "dac_gain": 3, "mix_gain":  9, "dig_gain": 0},
-                {"rf_power": 13, "pa_gain": 1, "dac_gain": 3, "mix_gain": 15, "dig_gain": 0},
-                {"rf_power": 14, "pa_gain": 2, "dac_gain": 3, "mix_gain": 10, "dig_gain": 0},
-                {"rf_power": 16, "pa_gain": 2, "dac_gain": 3, "mix_gain": 11, "dig_gain": 0},
-                {"rf_power": 20, "pa_gain": 3, "dac_gain": 3, "mix_gain":  9, "dig_gain": 0},
-                {"rf_power": 23, "pa_gain": 3, "dac_gain": 3, "mix_gain": 10, "dig_gain": 0},
-                {"rf_power": 25, "pa_gain": 3, "dac_gain": 3, "mix_gain": 11, "dig_gain": 0},
-                {"rf_power": 26, "pa_gain": 3, "dac_gain": 3, "mix_gain": 12, "dig_gain": 0},
-                {"rf_power": 27, "pa_gain": 3, "dac_gain": 3, "mix_gain": 14, "dig_gain": 0}
-            ]
-        },
-        "radio_1": {
-            "enable": true,
-            "type": "SX1257",
-            "freq": 868500000,
-            "rssi_offset": -196.0,
-            "rssi_tcomp": {"coeff_a": -0.006, "coeff_b": 0.789, "coeff_c": -14.992, "coeff_d": 1988.572, "coeff_e": 105236.996},
-            "tx_enable": false
-        },
-        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
-        "chan_multiSF_0": {"enable": true, "radio": 1, "if": -400000},
-        "chan_multiSF_1": {"enable": true, "radio": 1, "if": -200000},
-        "chan_multiSF_2": {"enable": true, "radio": 1, "if":  0},
-        "chan_multiSF_3": {"enable": true, "radio": 0, "if": -400000},
-        "chan_multiSF_4": {"enable": true, "radio": 0, "if": -200000},
-        "chan_multiSF_5": {"enable": true, "radio": 0, "if":  0},
-        "chan_multiSF_6": {"enable": true, "radio": 0, "if":  200000},
-        "chan_multiSF_7": {"enable": true, "radio": 0, "if":  400000},
-        "chan_Lora_std":  {"enable": true, "radio": 1, "if": -200000, "bandwidth": 250000, "spread_factor": 7,
-                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1},
-        "chan_FSK":       {"enable": true, "radio": 1, "if":  300000, "bandwidth": 125000, "datarate": 50000}
-    },
-
-    "gateway_conf": {
-        "gateway_ID": "AA555A0000000000",
-        /* change with default server address/ports */
-        "server_address": "localhost",
-        "serv_port_up": 1730,
-        "serv_port_down": 1730,
-        /* adjust the following parameters for your network */
-        "keepalive_interval": 10,
-        "stat_interval": 30,
-        "push_timeout_ms": 100,
-        /* forward only valid packets */
-        "forward_crc_valid": true,
-        "forward_crc_error": false,
-        "forward_crc_disabled": false,
-        /* GPS configuration */
-        "gps_tty_path": "/dev/ttyS0",
-        /* GPS reference coordinates */
-        "ref_latitude": 0.0,
-        "ref_longitude": 0.0,
-        "ref_altitude": 0,
-        /* Beaconing parameters */
-        "beacon_period": 0,
-        "beacon_freq_hz": 869525000,
-        "beacon_datarate": 9,
-        "beacon_bw_hz": 125000,
-        "beacon_power": 14,
-        "beacon_infodesc": 0
-    },
-
-    "debug_conf": {
-        "ref_payload":[
-            {"id": "0xCAFE1234"},
-            {"id": "0xCAFE2345"}
-        ],
-        "log_file": "loragw_hal.log"
-    }
-}
diff --git a/packet_forwarder/local_conf.json b/packet_forwarder/local_conf.json
new file mode 100644
index 0000000..09130e8
--- /dev/null
+++ b/packet_forwarder/local_conf.json
@@ -0,0 +1,7 @@
+{
+/* Put there parameters that are different for each gateway (eg. pointing one gateway to a test server while the others stay in production) */
+/* Settings defined in global_conf will be overwritten by those in local_conf */
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000" /* you must pick a unique 64b number for each gateway (represented by an hex string) */
+    }
+}
diff --git a/packet_forwarder/region/global_conf.as923-1.json b/packet_forwarder/region/global_conf.as923-1.json
new file mode 100644
index 0000000..13734e9
--- /dev/null
+++ b/packet_forwarder/region/global_conf.as923-1.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 923600000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 923000000,
+            "tx_freq_max": 925000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 924600000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 0, "if":  400000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -400000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if": -200000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  0},
+        "chan_FSK":       {"enable": false, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": false, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}	      				 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 0,	
+        "beacon_freq_hz": 923400000,
+        "beacon_freq_nb": 1,
+        "beacon_freq_step": 0,
+        "beacon_datarate": 9,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.as923-2.json b/packet_forwarder/region/global_conf.as923-2.json
new file mode 100644
index 0000000..8144748
--- /dev/null
+++ b/packet_forwarder/region/global_conf.as923-2.json
@@ -0,0 +1,96 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 921800000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 920000000,
+            "tx_freq_max": 925000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 922400000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -200000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if":  0},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  200000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  400000},
+        "chan_FSK":       {"enable": false, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": false, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}     
+ 		 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 0,	
+        "beacon_freq_hz": 921600000,
+        "beacon_freq_nb": 1,
+        "beacon_freq_step": 0,
+        "beacon_datarate": 9,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.as923-3.json b/packet_forwarder/region/global_conf.as923-3.json
new file mode 100644
index 0000000..078cfac
--- /dev/null
+++ b/packet_forwarder/region/global_conf.as923-3.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 917000000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 910000000,
+            "tx_freq_max": 925000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 917600000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -200000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -0},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  200000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  400000},
+        "chan_FSK":       {"enable": false, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": false, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 0,	
+        "beacon_freq_hz": 916800000,
+        "beacon_freq_nb": 1,
+        "beacon_freq_step": 0,
+        "beacon_datarate": 9,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.as923-4.json b/packet_forwarder/region/global_conf.as923-4.json
new file mode 100644
index 0000000..77766b1
--- /dev/null
+++ b/packet_forwarder/region/global_conf.as923-4.json
@@ -0,0 +1,96 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 917700000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 910000000,
+            "tx_freq_max": 925000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 918300000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -200000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -0},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  200000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  400000},
+        "chan_FSK":       {"enable": false, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": false, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 0,	
+        "beacon_freq_hz": 917500000
+,
+        "beacon_freq_nb": 1,
+        "beacon_freq_step": 0,
+        "beacon_datarate": 9,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.au915-928-1.json b/packet_forwarder/region/global_conf.au915-928-1.json
new file mode 100644
index 0000000..1e9adb0
--- /dev/null
+++ b/packet_forwarder/region/global_conf.au915-928-1.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 915600000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 915000000,
+            "tx_freq_max": 928000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 916300000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 923300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 600000,
+        "beacon_datarate": 12,
+        "beacon_bw_hz": 500000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.au915-928-2.json b/packet_forwarder/region/global_conf.au915-928-2.json
new file mode 100644
index 0000000..f3bcb9f
--- /dev/null
+++ b/packet_forwarder/region/global_conf.au915-928-2.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 917200000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 915000000,
+            "tx_freq_max": 928000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 917900000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 923300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 600000,
+        "beacon_datarate": 12,
+        "beacon_bw_hz": 500000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.au915-928-3.json b/packet_forwarder/region/global_conf.au915-928-3.json
new file mode 100644
index 0000000..0c0e7c6
--- /dev/null
+++ b/packet_forwarder/region/global_conf.au915-928-3.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 918800000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 915000000,
+            "tx_freq_max": 928000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 919500000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 923300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 600000,
+        "beacon_datarate": 12,
+        "beacon_bw_hz": 500000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.au915-928-4.json b/packet_forwarder/region/global_conf.au915-928-4.json
new file mode 100644
index 0000000..41836a9
--- /dev/null
+++ b/packet_forwarder/region/global_conf.au915-928-4.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 920400000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 915000000,
+            "tx_freq_max": 928000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 921100000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 923300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 600000,
+        "beacon_datarate": 12,
+        "beacon_bw_hz": 500000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.au915-928-5.json b/packet_forwarder/region/global_conf.au915-928-5.json
new file mode 100644
index 0000000..5defe4c
--- /dev/null
+++ b/packet_forwarder/region/global_conf.au915-928-5.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 922000000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 915000000,
+            "tx_freq_max": 928000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 922700000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if": -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 923300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 600000,
+        "beacon_datarate": 12,
+        "beacon_bw_hz": 500000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.au915-928-6.json b/packet_forwarder/region/global_conf.au915-928-6.json
new file mode 100644
index 0000000..f301abe
--- /dev/null
+++ b/packet_forwarder/region/global_conf.au915-928-6.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 923600000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 915000000,
+            "tx_freq_max": 928000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 924300000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 923300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 600000,
+        "beacon_datarate": 12,
+        "beacon_bw_hz": 500000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.au915-928-7.json b/packet_forwarder/region/global_conf.au915-928-7.json
new file mode 100644
index 0000000..efe97f3
--- /dev/null
+++ b/packet_forwarder/region/global_conf.au915-928-7.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 925200000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 915000000,
+            "tx_freq_max": 928000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 925900000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 923300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 600000,
+        "beacon_datarate": 12,
+        "beacon_bw_hz": 500000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.au915-928-8.json b/packet_forwarder/region/global_conf.au915-928-8.json
new file mode 100644
index 0000000..b64ecd5
--- /dev/null
+++ b/packet_forwarder/region/global_conf.au915-928-8.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 926800000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 915000000,
+            "tx_freq_max": 928000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 927500000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 923300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 600000,
+        "beacon_datarate": 12,
+        "beacon_bw_hz": 500000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/global_conf.json.sx1250.CN490 b/packet_forwarder/region/global_conf.cn470-510-1.json
similarity index 51%
rename from packet_forwarder/global_conf.json.sx1250.CN490
rename to packet_forwarder/region/global_conf.cn470-510-1.json
index 82684c1..932b957 100644
--- a/packet_forwarder/global_conf.json.sx1250.CN490
+++ b/packet_forwarder/region/global_conf.cn470-510-1.json
@@ -4,91 +4,85 @@
         "com_path": "/dev/spidev0.0",
         "lorawan_public": true,
         "clksrc": 0,
-        "antenna_gain": 0, /* antenna gain, in dBi */
+        "antenna_gain": 0, 
         "full_duplex": false,
         "fine_timestamp": {
             "enable": false,
-            "mode": "all_sf" /* high_capacity or all_sf */
+            "mode": "all_sf"
         },
+
         "radio_0": {
             "enable": true,
             "type": "SX1250",
-            "single_input_mode": true,
             "freq": 471400000,
-            "rssi_offset": -207.0,
+            "rssi_offset": -215.4,
             "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
             "tx_enable": true,
-            "tx_freq_min": 500000000,
+            "tx_freq_min": 470000000,
             "tx_freq_max": 510000000,
             "tx_gain_lut":[
-                {"rf_power": -6, "pa_gain": 0, "pwr_idx":  0},
-                {"rf_power": -3, "pa_gain": 0, "pwr_idx":  1},
-                {"rf_power":  0, "pa_gain": 0, "pwr_idx":  2},
-                {"rf_power":  3, "pa_gain": 1, "pwr_idx":  3},
-                {"rf_power":  6, "pa_gain": 1, "pwr_idx":  4},
-                {"rf_power": 10, "pa_gain": 1, "pwr_idx":  5},
-                {"rf_power": 11, "pa_gain": 1, "pwr_idx":  6},
-                {"rf_power": 12, "pa_gain": 1, "pwr_idx":  7},
-                {"rf_power": 13, "pa_gain": 1, "pwr_idx":  8},
-                {"rf_power": 14, "pa_gain": 1, "pwr_idx":  9},
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
                 {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
-                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 11},
-                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 12},
-                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 13},
-                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 14},
-                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 15}
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
             ]
         },
         "radio_1": {
             "enable": true,
             "type": "SX1250",
-            "single_input_mode": true,
-            "freq": 475000000,
-            "rssi_offset": -207.0,
+            "freq": 470600000,
+            "rssi_offset": -215.4,
             "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
             "tx_enable": false
         },
         "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
-        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},
-        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},
-        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},
-        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},
-        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},
-        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},
-        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
         "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
-        "chan_Lora_std":  {"enable": true, "radio": 1, "if": -200000, "bandwidth": 250000, "spread_factor": 7,
-                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1},
-        "chan_FSK":       {"enable": true, "radio": 1, "if":  300000, "bandwidth": 125000, "datarate": 50000}
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  300000, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 0, "if":  -200000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
     },
 
     "gateway_conf": {
         "gateway_ID": "AA555A0000000000",
-        /* change with default server address/ports */
         "server_address": "localhost",
-        "serv_port_up": 1730,
-        "serv_port_down": 1730,
-        /* adjust the following parameters for your network */
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
         "keepalive_interval": 10,
         "stat_interval": 30,
         "push_timeout_ms": 100,
-        /* forward only valid packets */
         "forward_crc_valid": true,
         "forward_crc_error": false,
         "forward_crc_disabled": false,
-        /* GPS configuration */
-        "gps_tty_path": "/dev/ttyS0",
-        /* GPS reference coordinates */
+        "gps_tty_path": "/dev/ttySTM1",
         "ref_latitude": 0.0,
         "ref_longitude": 0.0,
         "ref_altitude": 0,
-        /* Beaconing parameters */
-        "beacon_period": 0,
-        "beacon_freq_hz": 869525000,
-        "beacon_datarate": 9,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 508300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 200000,
+        "beacon_datarate": 10,
         "beacon_bw_hz": 125000,
-        "beacon_power": 14,
-        "beacon_infodesc": 0
+        "beacon_power": 27
     },
 
     "debug_conf": {
diff --git a/packet_forwarder/region/global_conf.cn470-510-10.json b/packet_forwarder/region/global_conf.cn470-510-10.json
new file mode 100644
index 0000000..ff57b62
--- /dev/null
+++ b/packet_forwarder/region/global_conf.cn470-510-10.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 485800000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 470000000,
+            "tx_freq_max": 510000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 485000000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  300000, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 0, "if":  -200000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 508300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 200000,
+        "beacon_datarate": 10,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.cn470-510-11.json b/packet_forwarder/region/global_conf.cn470-510-11.json
new file mode 100644
index 0000000..89418f9
--- /dev/null
+++ b/packet_forwarder/region/global_conf.cn470-510-11.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 487400000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 470000000,
+            "tx_freq_max": 510000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 486600000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  300000, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 0, "if":  -200000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 508300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 200000,
+        "beacon_datarate": 10,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.cn470-510-12.json b/packet_forwarder/region/global_conf.cn470-510-12.json
new file mode 100644
index 0000000..c6257b5
--- /dev/null
+++ b/packet_forwarder/region/global_conf.cn470-510-12.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 489000000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 470000000,
+            "tx_freq_max": 510000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 488200000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  300000, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 0, "if":  -200000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 508300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 200000,
+        "beacon_datarate": 10,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.cn470-510-2.json b/packet_forwarder/region/global_conf.cn470-510-2.json
new file mode 100644
index 0000000..3bbda29
--- /dev/null
+++ b/packet_forwarder/region/global_conf.cn470-510-2.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 473000000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 470000000,
+            "tx_freq_max": 510000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 472200000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  300000, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 0, "if":  -200000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 508300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 200000,
+        "beacon_datarate": 10,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.cn470-510-3.json b/packet_forwarder/region/global_conf.cn470-510-3.json
new file mode 100644
index 0000000..2d9fad9
--- /dev/null
+++ b/packet_forwarder/region/global_conf.cn470-510-3.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 474600000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 470000000,
+            "tx_freq_max": 510000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 473800000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  300000, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 0, "if":  -200000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 508300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 200000,
+        "beacon_datarate": 10,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.cn470-510-4.json b/packet_forwarder/region/global_conf.cn470-510-4.json
new file mode 100644
index 0000000..3a35f43
--- /dev/null
+++ b/packet_forwarder/region/global_conf.cn470-510-4.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 476200000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 470000000,
+            "tx_freq_max": 510000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 475400000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  300000, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 0, "if":  -200000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 508300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 200000,
+        "beacon_datarate": 10,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.cn470-510-5.json b/packet_forwarder/region/global_conf.cn470-510-5.json
new file mode 100644
index 0000000..5ea09f3
--- /dev/null
+++ b/packet_forwarder/region/global_conf.cn470-510-5.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 477800000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 470000000,
+            "tx_freq_max": 510000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 477000000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  300000, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 0, "if":  -200000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 508300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 200000,
+        "beacon_datarate": 10,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.cn470-510-6.json b/packet_forwarder/region/global_conf.cn470-510-6.json
new file mode 100644
index 0000000..2f22771
--- /dev/null
+++ b/packet_forwarder/region/global_conf.cn470-510-6.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 479400000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 470000000,
+            "tx_freq_max": 510000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 478600000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  300000, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 0, "if":  -200000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 508300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 200000,
+        "beacon_datarate": 10,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.cn470-510-7.json b/packet_forwarder/region/global_conf.cn470-510-7.json
new file mode 100644
index 0000000..06e3b07
--- /dev/null
+++ b/packet_forwarder/region/global_conf.cn470-510-7.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 481000000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 470000000,
+            "tx_freq_max": 510000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 480200000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  300000, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 0, "if":  -200000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 508300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 200000,
+        "beacon_datarate": 10,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.cn470-510-8.json b/packet_forwarder/region/global_conf.cn470-510-8.json
new file mode 100644
index 0000000..8ab0f86
--- /dev/null
+++ b/packet_forwarder/region/global_conf.cn470-510-8.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 482600000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 470000000,
+            "tx_freq_max": 510000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 481800000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  300000, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 0, "if":  -200000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 508300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 200000,
+        "beacon_datarate": 10,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.cn470-510-9.json b/packet_forwarder/region/global_conf.cn470-510-9.json
new file mode 100644
index 0000000..c3986ab
--- /dev/null
+++ b/packet_forwarder/region/global_conf.cn470-510-9.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 484200000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 470000000,
+            "tx_freq_max": 510000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 483400000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  300000, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 0, "if":  -200000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 508300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 200000,
+        "beacon_datarate": 10,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.cn779-787-1.json b/packet_forwarder/region/global_conf.cn779-787-1.json
new file mode 100644
index 0000000..5d13a22
--- /dev/null
+++ b/packet_forwarder/region/global_conf.cn779-787-1.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 779900000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 779000000,
+            "tx_freq_max": 787000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 781300000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -600000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -400000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if": -200000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  0},
+	"chan_FSK":       {"enable": true, "radio": 1, "if":  0, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if": -500000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 0,	
+        "beacon_freq_hz": 785000000,
+        "beacon_freq_nb": 1,
+        "beacon_freq_step": 0,
+        "beacon_datarate": 9,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.eu433-434-1.json b/packet_forwarder/region/global_conf.eu433-434-1.json
new file mode 100644
index 0000000..7948a75
--- /dev/null
+++ b/packet_forwarder/region/global_conf.eu433-434-1.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 433475000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 433050000,
+            "tx_freq_max": 434790000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 434275000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if": -100000, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 0, "if": -100000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 0,	
+        "beacon_freq_hz": 434665000,
+        "beacon_freq_nb": 1,
+        "beacon_freq_step": 0,
+        "beacon_datarate": 9,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.eu863-870-1.json b/packet_forwarder/region/global_conf.eu863-870-1.json
new file mode 100644
index 0000000..895365e
--- /dev/null
+++ b/packet_forwarder/region/global_conf.eu863-870-1.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 867500000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 863000000,
+            "tx_freq_max": 870000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 868500000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 1, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 1, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 1, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_4": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_5": {"enable": true, "radio": 0, "if":  0},   
+        "chan_multiSF_6": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_7": {"enable": true, "radio": 0, "if":  400000},
+	"chan_FSK":       {"enable": true, "radio": 1, "if":  300000, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if": -200000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 0,	
+        "beacon_freq_hz": 869525000,
+        "beacon_freq_nb": 1,
+        "beacon_freq_step": 0,
+        "beacon_datarate": 9,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.in865-867-1.json b/packet_forwarder/region/global_conf.in865-867-1.json
new file mode 100644
index 0000000..195ae3d
--- /dev/null
+++ b/packet_forwarder/region/global_conf.in865-867-1.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 865200000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 865000000,
+            "tx_freq_max": 867000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 866385000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -137500},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if":  202500},   
+        "chan_multiSF_2": {"enable": true, "radio": 1, "if": -400000},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  325000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -200000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if":  0},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  200000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  400000},
+	"chan_FSK":       {"enable": false, "radio": 1, "if":  0, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": false, "radio": 1, "if":  0, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 0,	
+        "beacon_freq_hz": 866550000,
+        "beacon_freq_nb": 1,
+        "beacon_freq_step": 0,
+        "beacon_datarate": 8,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.kr920-923-1.json b/packet_forwarder/region/global_conf.kr920-923-1.json
new file mode 100644
index 0000000..048c9fd
--- /dev/null
+++ b/packet_forwarder/region/global_conf.kr920-923-1.json
@@ -0,0 +1,94 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0,  
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf" 
+        },
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 922200000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 920900000,
+            "tx_freq_max": 923300000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 923000000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -300000},  
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -100000},  
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  100000},  
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  300000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},  
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},  
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},  
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if": 300000},  
+        "chan_Lora_std":  {"enable": true, "radio": 0, "if": -300000, "bandwidth": 250000, "spread_factor": 7,
+			   "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1},
+        "chan_FSK":       {"enable": true, "radio": 0, "if": -300000, "bandwidth": 250000, "datarate": 50000}						 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000", 
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700, 
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1", 
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 0,	
+        "beacon_freq_hz": 923100000, 
+        "beacon_freq_nb": 1, 
+        "beacon_freq_step": 0, 
+        "beacon_datarate": 9, 
+        "beacon_bw_hz": 125000, 
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.ru864-870-1.json b/packet_forwarder/region/global_conf.ru864-870-1.json
new file mode 100644
index 0000000..275f350
--- /dev/null
+++ b/packet_forwarder/region/global_conf.ru864-870-1.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 869000000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 863000000,
+            "tx_freq_max": 870000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 867700000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -100000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if":  100000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  300000},        
+        "chan_multiSF_3": {"enable": true, "radio": 1, "if": -400000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -200000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if":  0},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  200000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  400000},
+	"chan_FSK":       {"enable": true, "radio": 1, "if": -200000, "bandwidth": 125000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 0, "if": -300000, "bandwidth": 250000, "spread_factor": 7,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 0}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 0,	
+        "beacon_freq_hz": 868900000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 0,
+        "beacon_datarate": 9,
+        "beacon_bw_hz": 125000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.us902-928-1.json b/packet_forwarder/region/global_conf.us902-928-1.json
new file mode 100644
index 0000000..637cbb6
--- /dev/null
+++ b/packet_forwarder/region/global_conf.us902-928-1.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 902700000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 902000000,
+            "tx_freq_max": 928000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 903400000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  300000, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 0, "if":  300000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 923300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 600000,
+        "beacon_datarate": 12,
+        "beacon_bw_hz": 500000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.us902-928-2.json b/packet_forwarder/region/global_conf.us902-928-2.json
new file mode 100644
index 0000000..79a533c
--- /dev/null
+++ b/packet_forwarder/region/global_conf.us902-928-2.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 904300000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 902000000,
+            "tx_freq_max": 928000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 905000000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 923300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 600000,
+        "beacon_datarate": 12,
+        "beacon_bw_hz": 500000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.us902-928-3.json b/packet_forwarder/region/global_conf.us902-928-3.json
new file mode 100644
index 0000000..2933dd2
--- /dev/null
+++ b/packet_forwarder/region/global_conf.us902-928-3.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 905900000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 902000000,
+            "tx_freq_max": 928000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 906600000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 923300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 600000,
+        "beacon_datarate": 12,
+        "beacon_bw_hz": 500000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.us902-928-4.json b/packet_forwarder/region/global_conf.us902-928-4.json
new file mode 100644
index 0000000..89c1cab
--- /dev/null
+++ b/packet_forwarder/region/global_conf.us902-928-4.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 907500000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 902000000,
+            "tx_freq_max": 928000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 908200000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 923300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 600000,
+        "beacon_datarate": 12,
+        "beacon_bw_hz": 500000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.us902-928-5.json b/packet_forwarder/region/global_conf.us902-928-5.json
new file mode 100644
index 0000000..93250e1
--- /dev/null
+++ b/packet_forwarder/region/global_conf.us902-928-5.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 909100000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 902000000,
+            "tx_freq_max": 928000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 909800000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 923300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 600000,
+        "beacon_datarate": 12,
+        "beacon_bw_hz": 500000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.us902-928-6.json b/packet_forwarder/region/global_conf.us902-928-6.json
new file mode 100644
index 0000000..1d21310
--- /dev/null
+++ b/packet_forwarder/region/global_conf.us902-928-6.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 910700000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 902000000,
+            "tx_freq_max": 928000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 911400000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 923300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 600000,
+        "beacon_datarate": 12,
+        "beacon_bw_hz": 500000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.us902-928-7.json b/packet_forwarder/region/global_conf.us902-928-7.json
new file mode 100644
index 0000000..82bebbe
--- /dev/null
+++ b/packet_forwarder/region/global_conf.us902-928-7.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 912300000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 902000000,
+            "tx_freq_max": 928000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 913000000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 923300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 600000,
+        "beacon_datarate": 12,
+        "beacon_bw_hz": 500000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/region/global_conf.us902-928-8.json b/packet_forwarder/region/global_conf.us902-928-8.json
new file mode 100644
index 0000000..28da043
--- /dev/null
+++ b/packet_forwarder/region/global_conf.us902-928-8.json
@@ -0,0 +1,95 @@
+{
+    "SX130x_conf": {
+        "com_type": "SPI",
+        "com_path": "/dev/spidev0.0",
+        "lorawan_public": true,
+        "clksrc": 0,
+        "antenna_gain": 0, 
+        "full_duplex": false,
+        "fine_timestamp": {
+            "enable": false,
+            "mode": "all_sf"
+        },
+
+        "radio_0": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 913900000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": true,
+            "tx_freq_min": 902000000,
+            "tx_freq_max": 928000000,
+            "tx_gain_lut":[
+                {"rf_power": 12, "pa_gain": 1, "pwr_idx": 6},
+                {"rf_power": 13, "pa_gain": 1, "pwr_idx": 7},
+                {"rf_power": 14, "pa_gain": 1, "pwr_idx": 8},
+                {"rf_power": 15, "pa_gain": 1, "pwr_idx": 9},
+                {"rf_power": 16, "pa_gain": 1, "pwr_idx": 10},
+                {"rf_power": 17, "pa_gain": 1, "pwr_idx": 11},
+                {"rf_power": 18, "pa_gain": 1, "pwr_idx": 12},
+                {"rf_power": 19, "pa_gain": 1, "pwr_idx": 13},
+                {"rf_power": 20, "pa_gain": 1, "pwr_idx": 14},
+                {"rf_power": 21, "pa_gain": 1, "pwr_idx": 15},
+                {"rf_power": 22, "pa_gain": 1, "pwr_idx": 16},
+                {"rf_power": 23, "pa_gain": 1, "pwr_idx": 17},
+                {"rf_power": 24, "pa_gain": 1, "pwr_idx": 18},
+                {"rf_power": 25, "pa_gain": 1, "pwr_idx": 19},
+                {"rf_power": 26, "pa_gain": 1, "pwr_idx": 21},
+                {"rf_power": 27, "pa_gain": 1, "pwr_idx": 22}
+            ]
+        },
+        "radio_1": {
+            "enable": true,
+            "type": "SX1250",
+            "freq": 914600000,
+            "rssi_offset": -215.4,
+            "rssi_tcomp": {"coeff_a": 0, "coeff_b": 0, "coeff_c": 20.41, "coeff_d": 2162.56, "coeff_e": 0},
+            "tx_enable": false
+        },
+        "chan_multiSF_All": {"spreading_factor_enable": [ 5, 6, 7, 8, 9, 10, 11, 12 ]},
+        "chan_multiSF_0": {"enable": true, "radio": 0, "if": -400000},   
+        "chan_multiSF_1": {"enable": true, "radio": 0, "if": -200000},   
+        "chan_multiSF_2": {"enable": true, "radio": 0, "if":  0},        
+        "chan_multiSF_3": {"enable": true, "radio": 0, "if":  200000},   
+        "chan_multiSF_4": {"enable": true, "radio": 1, "if": -300000},   
+        "chan_multiSF_5": {"enable": true, "radio": 1, "if": -100000},   
+        "chan_multiSF_6": {"enable": true, "radio": 1, "if":  100000},   
+        "chan_multiSF_7": {"enable": true, "radio": 1, "if":  300000},
+	"chan_FSK":       {"enable": true, "radio": 0, "if":  0, "bandwidth": 250000, "datarate": 50000},       
+        "chan_Lora_std":  {"enable": true, "radio": 1, "if":  -400000, "bandwidth": 500000, "spread_factor": 8,						 
+                           "implicit_hdr": false, "implicit_payload_length": 17, "implicit_crc_en": false, "implicit_coderate": 1}			 
+    },
+
+    "gateway_conf": {
+        "gateway_ID": "AA555A0000000000",
+        "server_address": "localhost",
+        "serv_port_up": 1700,
+        "serv_port_down": 1700,
+        "keepalive_interval": 10,
+        "stat_interval": 30,
+        "push_timeout_ms": 100,
+        "forward_crc_valid": true,
+        "forward_crc_error": false,
+        "forward_crc_disabled": false,
+        "gps_tty_path": "/dev/ttySTM1",
+        "ref_latitude": 0.0,
+        "ref_longitude": 0.0,
+        "ref_altitude": 0,
+        "beacon_period": 128,	
+        "beacon_freq_hz": 923300000,
+        "beacon_freq_nb": 8,
+        "beacon_freq_step": 600000,
+        "beacon_datarate": 12,
+        "beacon_bw_hz": 500000,
+        "beacon_power": 27
+    },
+
+    "debug_conf": {
+        "ref_payload":[
+            {"id": "0xCAFE1234"},
+            {"id": "0xCAFE2345"}
+        ],
+        "log_file": "loragw_hal.log"
+    }
+}
diff --git a/packet_forwarder/reset_lgw.sh b/packet_forwarder/reset_lgw.sh
new file mode 100644
index 0000000..2fa4f68
--- /dev/null
+++ b/packet_forwarder/reset_lgw.sh
@@ -0,0 +1,30 @@
+#!/bin/sh
+
+# PF3/GPIO7/PIN26-CONN40/RESET_SX1302
+
+reset() {
+
+echo "RESET 2287"
+./concentrator-reset.sh
+
+
+}
+ 
+
+case "$1" in
+    start)
+    #term # just in case
+    #init
+    reset
+    ;;
+    stop)
+    reset
+    #term
+    ;;
+    *)
+    echo "Usage: $0 {start|stop}"
+    exit 1
+    ;;
+esac
+
+exit 0
diff --git a/packet_forwarder/src/lora_pkt_fwd.c b/packet_forwarder/src/lora_pkt_fwd.c
index 53661de..501f0c0 100644
--- a/packet_forwarder/src/lora_pkt_fwd.c
+++ b/packet_forwarder/src/lora_pkt_fwd.c
@@ -72,6 +72,7 @@ License: Revised BSD License, see LICENSE.TXT file include in the project
 #endif
 
 #define JSON_CONF_DEFAULT   "global_conf.json"
+#define JSON_CONF_LOCAL		"local_conf.json"
 
 #define DEFAULT_SERVER      127.0.0.1   /* hostname also supported */
 #define DEFAULT_PORT_UP     1780
@@ -1431,6 +1432,8 @@ int main(int argc, char ** argv)
     /* configuration file related */
     const char defaut_conf_fname[] = JSON_CONF_DEFAULT;
     const char * conf_fname = defaut_conf_fname; /* pointer to a string we won't touch */
+    const char default_local_conf_fname[] = JSON_CONF_LOCAL;
+    const char * local_conf_fname = default_local_conf_fname;
 
     /* threads */
     pthread_t thrid_up;
@@ -1545,6 +1548,17 @@ int main(int argc, char ** argv)
         MSG("ERROR: [main] failed to find any configuration file named %s\n", conf_fname);
         exit(EXIT_FAILURE);
     }
+    /* load local configuration files */
+    if (access(local_conf_fname, R_OK) == 0) { /* if there is a local conf, parse it  */
+        MSG("INFO: found configuration file %s, parsing it\n", local_conf_fname);
+        x = parse_gateway_configuration(local_conf_fname);
+        if (x != 0) {
+            exit(EXIT_FAILURE);
+        }
+    } else {
+        MSG("ERROR: [main] failed to find any configuration file named %s\n", local_conf_fname);
+        exit(EXIT_FAILURE);
+    }
 
     /* Start GPS a.s.a.p., to allow it to lock */
     if (gps_tty_path[0] != '\0') { /* do not try to open GPS device if no path set */
@@ -1875,9 +1889,9 @@ int main(int argc, char ** argv)
         i = lgw_get_temperature(&temperature);
         pthread_mutex_unlock(&mx_concent);
         if (i != LGW_HAL_SUCCESS) {
-            printf("### Concentrator temperature unknown ###\n");
+//            printf("### Concentrator temperature unknown ###\n");
         } else {
-            printf("### Concentrator temperature: %.0f C ###\n", temperature);
+//            printf("### Concentrator temperature: %.0f C ###\n", temperature);
         }
         printf("##### END #####\n");
 
@@ -3334,6 +3348,51 @@ void thread_jit(void) {
     MSG("\nINFO: End of JIT thread\n");
 }
 
+static void modify_os_time(const uint32_t ppm_tstamp)
+{
+    struct timespec y;
+    struct timespec tv;
+    static bool time_already_set = false;
+    struct timeval stamp;
+    gettimeofday(&stamp, NULL);
+    int time_diff = 0;
+    lgw_cnt2utc(time_reference_gps, ppm_tstamp, &y);
+    if ((!gps_enabled) || time_already_set)
+    {
+        return;
+    }
+    if (y.tv_sec < 1583402711) // time less than '2020-03-05 18:00:00'
+    {
+        return;
+    }
+
+    MSG("INFO: [modify_os_time] local_time=%ld, gps_time=%ld\n", stamp.tv_sec, y.tv_sec);
+    time_diff = abs(y.tv_sec - stamp.tv_sec);
+
+    if (time_diff < 10)
+    {
+        time_already_set = true;
+        MSG("INFO: [modify_os_time] The difference between the system time(%ld) and the GPS time(%ld) is less than 10 seconds. Use the system time.\n", stamp.tv_sec, y.tv_sec);
+        return;
+    }
+
+    tv.tv_sec = y.tv_sec;
+    tv.tv_nsec = 0;
+
+    int ret = clock_settime(CLOCK_REALTIME, &tv);
+    if (0 == ret)
+    {
+        time_already_set = true;
+        time_t t;
+        struct tm* local;
+        char buf[128] = {0};
+        t = time(NULL);
+        local = localtime(&t);
+        strftime(buf, 64, "%Y-%m-%d %H:%M:%S", local);  
+        MSG("INFO: [modify_os_time] System time has been synchronized via GPS, %s\n", buf);
+    }
+}
+
 /* -------------------------------------------------------------------------- */
 /* --- THREAD 4: PARSE GPS MESSAGE AND KEEP GATEWAY IN SYNC ----------------- */
 
@@ -3361,6 +3420,7 @@ static void gps_process_sync(void) {
     /* try to update time reference with the new GPS time & timestamp */
     pthread_mutex_lock(&mx_timeref);
     i = lgw_gps_sync(&time_reference_gps, trig_tstamp, utc, gps_time);
+    modify_os_time(trig_tstamp);
     pthread_mutex_unlock(&mx_timeref);
     if (i != LGW_GPS_SUCCESS) {
         MSG("WARNING: [gps] GPS out of sync, keeping previous time reference\n");
diff --git a/packet_forwarder/src/test_loragw_gps_i2c.c b/packet_forwarder/src/test_loragw_gps_i2c.c
new file mode 100644
index 0000000..95385b9
--- /dev/null
+++ b/packet_forwarder/src/test_loragw_gps_i2c.c
@@ -0,0 +1,429 @@
+/*
+ / _____)             _              | |
+( (____  _____ ____ _| |_ _____  ____| |__
+ \____ \| ___ |    (_   _) ___ |/ ___)  _ \
+ _____) ) ____| | | || |_| ____( (___| | | |
+(______/|_____)_|_|_| \__)_____)\____)_| |_|
+  (C)2019 Semtech
+
+Description:
+    Minimum test program for the loragw_gps module
+
+License: Revised BSD License, see LICENSE.TXT file include in the project
+*/
+
+
+/* -------------------------------------------------------------------------- */
+/* --- DEPENDANCIES --------------------------------------------------------- */
+
+/* fix an issue between POSIX and C99 */
+#if __STDC_VERSION__ >= 199901L
+    #define _XOPEN_SOURCE 600
+#else
+    #define _XOPEN_SOURCE 500
+#endif
+
+#include <stdint.h>     /* C99 types */
+#include <stdbool.h>    /* bool type */
+#include <stdio.h>      /* printf */
+#include <string.h>     /* memset */
+#include <signal.h>     /* sigaction */
+#include <stdlib.h>     /* exit */
+#include <unistd.h>     /* read */
+
+#include "loragw_hal.h"
+#include "loragw_gps.h"
+#include "loragw_aux.h"
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE MACROS ------------------------------------------------------- */
+
+#define MATCH(a,b) ( ((int32_t)(a-b)<=1) && ((int32_t)(a-b)>=-1) ) /* tolerate 1µs */
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE CONSTANTS ---------------------------------------------------- */
+
+#define COM_TYPE_DEFAULT LGW_COM_SPI
+#define COM_PATH_DEFAULT "/dev/spidev0.0"
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE VARIABLES ---------------------------------------------------- */
+
+static int exit_sig = 0; /* 1 -> application terminates cleanly (shut down hardware, close open files, etc) */
+static int quit_sig = 0; /* 1 -> application terminates without shutting down the hardware */
+
+struct tref ppm_ref;
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE FUNCTIONS DECLARATION ---------------------------------------- */
+
+static void sig_handler(int sigio);
+static void gps_process_sync(void);
+static void gps_process_coords(void);
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE FUNCTIONS DEFINITION ----------------------------------------- */
+
+void usage(void) {
+    //printf("Library version information: %s\n", lgw_version_info());
+    printf("Available options:\n");
+    printf(" -h print this help\n");
+    printf(" -u        set COM type as USB (default is SPI)\n");
+    printf(" -d <path> COM path to be used to connect the concentrator\n");
+    printf("            => default path (SPI): " COM_PATH_DEFAULT "\n");
+    printf(" -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");
+    printf(" -r <uint> Radio type (1255, 1257, 1250)\n");
+}
+
+static void sig_handler(int sigio) {
+    if (sigio == SIGQUIT) {
+        quit_sig = 1;;
+    } else if ((sigio == SIGINT) || (sigio == SIGTERM)) {
+        exit_sig = 1;
+    }
+}
+
+static void gps_process_sync(void) {
+    /* variables for PPM pulse GPS synchronization */
+    uint32_t ppm_tstamp;
+    struct timespec ppm_gps;
+    struct timespec ppm_utc;
+
+    /* variables for timestamp <-> GPS time conversions */
+    uint32_t x, z;
+    struct timespec y;
+
+    /* get GPS time for synchronization */
+    int i = lgw_gps_get(&ppm_utc, &ppm_gps, NULL, NULL);
+    if (i != LGW_GPS_SUCCESS) {
+        printf("    No valid reference GPS time available, synchronization impossible.\n");
+        return;
+    }
+
+    /* get timestamp for synchronization */
+    i = lgw_get_trigcnt(&ppm_tstamp);
+    if (i != LGW_HAL_SUCCESS) {
+        printf("    Failed to read timestamp, synchronization impossible.\n");
+        return;
+    }
+
+    /* try to update synchronize time reference with the new GPS & timestamp */
+    i = lgw_gps_sync(&ppm_ref, ppm_tstamp, ppm_utc, ppm_gps);
+    if (i != LGW_GPS_SUCCESS) {
+        printf("    Synchronization error.\n");
+        return;
+    }
+
+    /* display result */
+    printf("    * Synchronization successful *\n");
+    printf("    UTC reference time: %lld.%09ld\n", (long long)ppm_ref.utc.tv_sec, ppm_ref.utc.tv_nsec);
+    printf("    GPS reference time: %lld.%09ld\n", (long long)ppm_ref.gps.tv_sec, ppm_ref.gps.tv_nsec);
+    printf("    Internal counter reference value: %u\n", ppm_ref.count_us);
+    printf("    Clock error: %.9f\n", ppm_ref.xtal_err);
+
+    x = ppm_tstamp + 500000;
+
+    /* CNT -> GPS -> CNT */
+    printf("\n");
+    printf("    * Test of timestamp counter <-> GPS value conversion *\n");
+    printf("    Test value: %u\n", x);
+    lgw_cnt2gps(ppm_ref, x, &y);
+    printf("    Conversion to GPS: %lld.%09ld\n", (long long)y.tv_sec, y.tv_nsec);
+    lgw_gps2cnt(ppm_ref, y, &z);
+    printf("    Converted back: %u ==> %dµs\n", z, (int32_t)(z-x));
+    /* Display test result */
+    if (MATCH(x,z)) {
+        printf("    ** PASS **: (SX1302 -> GPS -> SX1302) conversion MATCH\n");
+    } else {
+        printf("    ** FAILED **: (SX1302 -> GPS -> SX1302) conversion MISMATCH\n");
+    }
+
+    /* CNT -> UTC -> CNT */
+    printf("\n");
+    printf("    * Test of timestamp counter <-> UTC value conversion *\n");
+    printf("    Test value: %u\n", x);
+    lgw_cnt2utc(ppm_ref, x, &y);
+    printf("    Conversion to UTC: %lld.%09ld\n", (long long)y.tv_sec, y.tv_nsec);
+    lgw_utc2cnt(ppm_ref, y, &z);
+    printf("    Converted back: %u ==> %dµs\n", z, (int32_t)(z-x));
+    /* Display test result */
+    if (MATCH(x,z)) {
+        printf("    ** PASS **: (SX1302 -> UTC -> SX1302) conversion MATCH\n");
+    } else {
+        printf("    ** FAILED **: (SX1302 -> UTC -> SX1302) conversion MISMATCH\n");
+    }
+}
+
+static void gps_process_coords(void) {
+    /* position variable */
+    struct coord_s coord;
+    struct coord_s gpserr;
+    int    i = lgw_gps_get(NULL, NULL, &coord, &gpserr);
+
+    /* update gateway coordinates */
+    if (i == LGW_GPS_SUCCESS) {
+        printf("\n");
+        printf("# GPS coordinates: latitude %.5f, longitude %.5f, altitude %i m\n", coord.lat, coord.lon, coord.alt);
+        printf("# GPS err:         latitude %.5f, longitude %.5f, altitude %i m\n", gpserr.lat, gpserr.lon, gpserr.alt);
+    }
+}
+
+/* -------------------------------------------------------------------------- */
+/* --- MAIN FUNCTION -------------------------------------------------------- */
+
+int main(int argc, char **argv)
+{
+    /* SPI interfaces */
+    const char com_path_default[] = COM_PATH_DEFAULT;
+    const char * com_path = com_path_default;
+    lgw_com_type_t com_type = COM_TYPE_DEFAULT;
+
+    struct sigaction sigact; /* SIGQUIT&SIGINT&SIGTERM signal handling */
+
+    int i;
+    unsigned int arg_u;
+
+    /* concentrator variables */
+    uint8_t clocksource = 0;
+    lgw_radio_type_t radio_type = LGW_RADIO_TYPE_SX1250;
+    struct lgw_conf_board_s boardconf;
+    struct lgw_conf_rxrf_s rfconf;
+
+    /* serial variables */
+    char serial_buff[128]; /* buffer to receive GPS data */
+    size_t wr_idx = 0;     /* pointer to end of chars in buffer */
+    int gps_tty_dev; /* file descriptor to the serial port of the GNSS module */
+
+    /* NMEA/UBX variables */
+    enum gps_msg latest_msg; /* keep track of latest NMEA/UBX message parsed */
+
+    /* parse command line options */
+    while ((i = getopt (argc, argv, "hk:r:d:u")) != -1) {
+        switch (i) {
+            case 'h':
+                usage();
+                return -1;
+                break;
+            case 'd':
+                if (optarg != NULL) {
+                    com_path = optarg;
+                }
+                break;
+            case 'u':
+                com_type = LGW_COM_USB;
+                break;
+            case 'r': /* <uint> Radio type */
+                i = sscanf(optarg, "%u", &arg_u);
+                if ((i != 1) || ((arg_u != 1255) && (arg_u != 1257) && (arg_u != 1250))) {
+                    printf("ERROR: argument parsing of -r argument. Use -h to print help\n");
+                    return EXIT_FAILURE;
+                } else {
+                    switch (arg_u) {
+                        case 1255:
+                            radio_type = LGW_RADIO_TYPE_SX1255;
+                            break;
+                        case 1257:
+                            radio_type = LGW_RADIO_TYPE_SX1257;
+                            break;
+                        default: /* 1250 */
+                            radio_type = LGW_RADIO_TYPE_SX1250;
+                            break;
+                    }
+                }
+                break;
+            case 'k': /* <uint> Clock Source */
+                i = sscanf(optarg, "%u", &arg_u);
+                if ((i != 1) || (arg_u > 1)) {
+                    printf("ERROR: argument parsing of -k argument. Use -h to print help\n");
+                    return EXIT_FAILURE;
+                } else {
+                    clocksource = (uint8_t)arg_u;
+                }
+                break;
+            default:
+                printf("ERROR: argument parsing\n");
+                usage();
+                exit(EXIT_FAILURE);
+        }
+    }
+
+    /* configure signal handling */
+    sigemptyset(&sigact.sa_mask);
+    sigact.sa_flags = 0;
+    sigact.sa_handler = sig_handler;
+    sigaction(SIGQUIT, &sigact, NULL);
+    sigaction(SIGINT, &sigact, NULL);
+    sigaction(SIGTERM, &sigact, NULL);
+
+    /* Intro message and library information */
+    printf("Beginning of test for loragw_gps.c\n");
+    printf("*** Library version information ***\n%s\n***\n", lgw_version_info());
+
+    if (com_type == LGW_COM_SPI) {
+        /* Board reset */
+        if (system("./reset_lgw.sh start") != 0) {
+            printf("ERROR: failed to reset SX1302, check your reset_lgw.sh script\n");
+            exit(EXIT_FAILURE);
+        }
+    }
+
+    /* Open and configure GPS */
+    i = lgw_gps_enable("/dev/i2c-1", "ubx7", 0, &gps_tty_dev);
+    if (i != LGW_GPS_SUCCESS) {
+        printf("ERROR: Failed to enable GPS\n");
+        exit(EXIT_FAILURE);
+    }
+
+    /* start concentrator (default conf for IoT SK) */
+    /* board config */
+    memset(&boardconf, 0, sizeof(boardconf));
+    boardconf.lorawan_public = true;
+    boardconf.clksrc = clocksource;
+    boardconf.full_duplex = false;
+    boardconf.com_type = com_type;
+    strncpy(boardconf.com_path, com_path, sizeof boardconf.com_path);
+    boardconf.com_path[sizeof boardconf.com_path - 1] = '\0'; /* ensure string termination */
+    if (lgw_board_setconf(&boardconf) != LGW_HAL_SUCCESS) {
+        printf("ERROR: failed to configure board\n");
+        return EXIT_FAILURE;
+    }
+
+    /* set configuration for RF chains */
+    memset( &rfconf, 0, sizeof rfconf);
+    rfconf.enable = true;
+    rfconf.freq_hz = 868000000;
+    rfconf.rssi_offset = 0.0;
+    rfconf.type = radio_type;
+    rfconf.tx_enable = false;
+    rfconf.single_input_mode = false;
+    if (lgw_rxrf_setconf(0, &rfconf) != LGW_HAL_SUCCESS) {
+        printf("ERROR: failed to configure rxrf 0\n");
+        return EXIT_FAILURE;
+    }
+
+    memset( &rfconf, 0, sizeof rfconf);
+    rfconf.enable = true;
+    rfconf.freq_hz = 868000000;
+    rfconf.rssi_offset = 0.0;
+    rfconf.type = radio_type;
+    rfconf.tx_enable = false;
+    rfconf.single_input_mode = false;
+    if (lgw_rxrf_setconf(1, &rfconf) != LGW_HAL_SUCCESS) {
+        printf("ERROR: failed to configure rxrf 1\n");
+        return EXIT_FAILURE;
+    }
+
+    /* start */
+    if (lgw_start() != LGW_HAL_SUCCESS) {
+        printf("ERROR: IMPOSSIBLE TO START THE GATEWAY\n");
+        exit(EXIT_FAILURE);
+    }
+
+    /* initialize some variables before loop */
+    memset(serial_buff, 0, sizeof serial_buff);
+    memset(&ppm_ref, 0, sizeof ppm_ref);
+
+    /* loop until user action */
+    while ((quit_sig != 1) && (exit_sig != 1)) {
+        size_t rd_idx = 0;
+        size_t frame_end_idx = 0;
+
+        /* blocking non-canonical read on serial port */
+        ssize_t nb_char = read(gps_tty_dev, serial_buff + wr_idx, LGW_GPS_MIN_MSG_SIZE);
+        if (nb_char <= 0) {
+            printf("WARNING: [gps] read() returned value %zd\n", nb_char);
+            continue;
+        }
+        wr_idx += (size_t)nb_char;
+
+        /*******************************************
+         * Scan buffer for UBX/NMEA sync chars and *
+         * attempt to decode frame if one is found *
+         *******************************************/
+        while (rd_idx < wr_idx) {
+            size_t frame_size = 0;
+
+            /* Scan buffer for UBX sync char */
+            if (serial_buff[rd_idx] == (char)LGW_GPS_UBX_SYNC_CHAR) {
+
+                /***********************
+                 * Found UBX sync char *
+                 ***********************/
+                latest_msg = lgw_parse_ubx(&serial_buff[rd_idx], (wr_idx - rd_idx), &frame_size);
+
+                if (frame_size > 0) {
+                    if (latest_msg == INCOMPLETE) {
+                        /* UBX header found but frame appears to be missing bytes */
+                        frame_size = 0;
+                    } else if (latest_msg == INVALID) {
+                        /* message header received but message appears to be corrupted */
+                        printf("WARNING: [gps] could not get a valid message from GPS (no time)\n");
+                        frame_size = 0;
+                    } else if (latest_msg == UBX_NAV_TIMEGPS) {
+                        printf("\n~~ UBX NAV-TIMEGPS sentence, triggering synchronization attempt ~~\n");
+                        gps_process_sync();
+                    }
+                }
+            } else if(serial_buff[rd_idx] == (char)LGW_GPS_NMEA_SYNC_CHAR) {
+                /************************
+                 * Found NMEA sync char *
+                 ************************/
+                /* scan for NMEA end marker (LF = 0x0a) */
+                char* nmea_end_ptr = memchr(&serial_buff[rd_idx],(int)0x0a, (wr_idx - rd_idx));
+
+                if (nmea_end_ptr) {
+                    /* found end marker */
+                    frame_size = nmea_end_ptr - &serial_buff[rd_idx] + 1;
+                    latest_msg = lgw_parse_nmea(&serial_buff[rd_idx], frame_size);
+
+                    if(latest_msg == INVALID || latest_msg == UNKNOWN) {
+                        /* checksum failed */
+                        frame_size = 0;
+                    } else if (latest_msg == NMEA_RMC) { /* Get location from RMC frames */
+                        gps_process_coords();
+                    }
+                }
+            }
+
+            if (frame_size > 0) {
+                /* At this point message is a checksum verified frame
+                   we're processed or ignored. Remove frame from buffer */
+                rd_idx += frame_size;
+                frame_end_idx = rd_idx;
+            } else {
+                rd_idx++;
+            }
+        } /* ...for(rd_idx = 0... */
+
+        if (frame_end_idx) {
+          /* Frames have been processed. Remove bytes to end of last processed frame */
+          memcpy(serial_buff,&serial_buff[frame_end_idx],wr_idx - frame_end_idx);
+          wr_idx -= frame_end_idx;
+        } /* ...for(rd_idx = 0... */
+
+        /* Prevent buffer overflow */
+        if ((sizeof(serial_buff) - wr_idx) < LGW_GPS_MIN_MSG_SIZE) {
+            memcpy(serial_buff,&serial_buff[LGW_GPS_MIN_MSG_SIZE],wr_idx - LGW_GPS_MIN_MSG_SIZE);
+            wr_idx -= LGW_GPS_MIN_MSG_SIZE;
+        }
+    }
+
+    /* clean up before leaving */
+    if (exit_sig == 1) {
+        lgw_gps_disable(gps_tty_dev);
+        lgw_stop();
+    }
+
+    if (com_type == LGW_COM_SPI) {
+        /* Board reset */
+        if (system("./reset_lgw.sh stop") != 0) {
+            printf("ERROR: failed to reset SX1302, check your reset_lgw.sh script\n");
+            exit(EXIT_FAILURE);
+        }
+    }
+
+    printf("\nEnd of test for loragw_gps.c\n");
+    exit(EXIT_SUCCESS);
+}
+
+/* --- EOF ------------------------------------------------------------------ */
diff --git a/packet_forwarder/src/test_loragw_gps_uart.c b/packet_forwarder/src/test_loragw_gps_uart.c
new file mode 100644
index 0000000..b686cd0
--- /dev/null
+++ b/packet_forwarder/src/test_loragw_gps_uart.c
@@ -0,0 +1,429 @@
+/*
+ / _____)             _              | |
+( (____  _____ ____ _| |_ _____  ____| |__
+ \____ \| ___ |    (_   _) ___ |/ ___)  _ \
+ _____) ) ____| | | || |_| ____( (___| | | |
+(______/|_____)_|_|_| \__)_____)\____)_| |_|
+  (C)2019 Semtech
+
+Description:
+    Minimum test program for the loragw_gps module
+
+License: Revised BSD License, see LICENSE.TXT file include in the project
+*/
+
+
+/* -------------------------------------------------------------------------- */
+/* --- DEPENDANCIES --------------------------------------------------------- */
+
+/* fix an issue between POSIX and C99 */
+#if __STDC_VERSION__ >= 199901L
+    #define _XOPEN_SOURCE 600
+#else
+    #define _XOPEN_SOURCE 500
+#endif
+
+#include <stdint.h>     /* C99 types */
+#include <stdbool.h>    /* bool type */
+#include <stdio.h>      /* printf */
+#include <string.h>     /* memset */
+#include <signal.h>     /* sigaction */
+#include <stdlib.h>     /* exit */
+#include <unistd.h>     /* read */
+
+#include "loragw_hal.h"
+#include "loragw_gps.h"
+#include "loragw_aux.h"
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE MACROS ------------------------------------------------------- */
+
+#define MATCH(a,b) ( ((int32_t)(a-b)<=1) && ((int32_t)(a-b)>=-1) ) /* tolerate 1µs */
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE CONSTANTS ---------------------------------------------------- */
+
+#define COM_TYPE_DEFAULT LGW_COM_SPI
+#define COM_PATH_DEFAULT "/dev/spidev0.0"
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE VARIABLES ---------------------------------------------------- */
+
+static int exit_sig = 0; /* 1 -> application terminates cleanly (shut down hardware, close open files, etc) */
+static int quit_sig = 0; /* 1 -> application terminates without shutting down the hardware */
+
+struct tref ppm_ref;
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE FUNCTIONS DECLARATION ---------------------------------------- */
+
+static void sig_handler(int sigio);
+static void gps_process_sync(void);
+static void gps_process_coords(void);
+
+/* -------------------------------------------------------------------------- */
+/* --- PRIVATE FUNCTIONS DEFINITION ----------------------------------------- */
+
+void usage(void) {
+    //printf("Library version information: %s\n", lgw_version_info());
+    printf("Available options:\n");
+    printf(" -h print this help\n");
+    printf(" -u        set COM type as USB (default is SPI)\n");
+    printf(" -d <path> COM path to be used to connect the concentrator\n");
+    printf("            => default path (SPI): " COM_PATH_DEFAULT "\n");
+    printf(" -k <uint> Concentrator clock source (Radio A or Radio B) [0..1]\n");
+    printf(" -r <uint> Radio type (1255, 1257, 1250)\n");
+}
+
+static void sig_handler(int sigio) {
+    if (sigio == SIGQUIT) {
+        quit_sig = 1;;
+    } else if ((sigio == SIGINT) || (sigio == SIGTERM)) {
+        exit_sig = 1;
+    }
+}
+
+static void gps_process_sync(void) {
+    /* variables for PPM pulse GPS synchronization */
+    uint32_t ppm_tstamp;
+    struct timespec ppm_gps;
+    struct timespec ppm_utc;
+
+    /* variables for timestamp <-> GPS time conversions */
+    uint32_t x, z;
+    struct timespec y;
+
+    /* get GPS time for synchronization */
+    int i = lgw_gps_get(&ppm_utc, &ppm_gps, NULL, NULL);
+    if (i != LGW_GPS_SUCCESS) {
+        printf("    No valid reference GPS time available, synchronization impossible.\n");
+        return;
+    }
+
+    /* get timestamp for synchronization */
+    i = lgw_get_trigcnt(&ppm_tstamp);
+    if (i != LGW_HAL_SUCCESS) {
+        printf("    Failed to read timestamp, synchronization impossible.\n");
+        return;
+    }
+
+    /* try to update synchronize time reference with the new GPS & timestamp */
+    i = lgw_gps_sync(&ppm_ref, ppm_tstamp, ppm_utc, ppm_gps);
+    if (i != LGW_GPS_SUCCESS) {
+        printf("    Synchronization error.\n");
+        return;
+    }
+
+    /* display result */
+    printf("    * Synchronization successful *\n");
+    printf("    UTC reference time: %lld.%09ld\n", (long long)ppm_ref.utc.tv_sec, ppm_ref.utc.tv_nsec);
+    printf("    GPS reference time: %lld.%09ld\n", (long long)ppm_ref.gps.tv_sec, ppm_ref.gps.tv_nsec);
+    printf("    Internal counter reference value: %u\n", ppm_ref.count_us);
+    printf("    Clock error: %.9f\n", ppm_ref.xtal_err);
+
+    x = ppm_tstamp + 500000;
+
+    /* CNT -> GPS -> CNT */
+    printf("\n");
+    printf("    * Test of timestamp counter <-> GPS value conversion *\n");
+    printf("    Test value: %u\n", x);
+    lgw_cnt2gps(ppm_ref, x, &y);
+    printf("    Conversion to GPS: %lld.%09ld\n", (long long)y.tv_sec, y.tv_nsec);
+    lgw_gps2cnt(ppm_ref, y, &z);
+    printf("    Converted back: %u ==> %dµs\n", z, (int32_t)(z-x));
+    /* Display test result */
+    if (MATCH(x,z)) {
+        printf("    ** PASS **: (SX1302 -> GPS -> SX1302) conversion MATCH\n");
+    } else {
+        printf("    ** FAILED **: (SX1302 -> GPS -> SX1302) conversion MISMATCH\n");
+    }
+
+    /* CNT -> UTC -> CNT */
+    printf("\n");
+    printf("    * Test of timestamp counter <-> UTC value conversion *\n");
+    printf("    Test value: %u\n", x);
+    lgw_cnt2utc(ppm_ref, x, &y);
+    printf("    Conversion to UTC: %lld.%09ld\n", (long long)y.tv_sec, y.tv_nsec);
+    lgw_utc2cnt(ppm_ref, y, &z);
+    printf("    Converted back: %u ==> %dµs\n", z, (int32_t)(z-x));
+    /* Display test result */
+    if (MATCH(x,z)) {
+        printf("    ** PASS **: (SX1302 -> UTC -> SX1302) conversion MATCH\n");
+    } else {
+        printf("    ** FAILED **: (SX1302 -> UTC -> SX1302) conversion MISMATCH\n");
+    }
+}
+
+static void gps_process_coords(void) {
+    /* position variable */
+    struct coord_s coord;
+    struct coord_s gpserr;
+    int    i = lgw_gps_get(NULL, NULL, &coord, &gpserr);
+
+    /* update gateway coordinates */
+    if (i == LGW_GPS_SUCCESS) {
+        printf("\n");
+        printf("# GPS coordinates: latitude %.5f, longitude %.5f, altitude %i m\n", coord.lat, coord.lon, coord.alt);
+        printf("# GPS err:         latitude %.5f, longitude %.5f, altitude %i m\n", gpserr.lat, gpserr.lon, gpserr.alt);
+    }
+}
+
+/* -------------------------------------------------------------------------- */
+/* --- MAIN FUNCTION -------------------------------------------------------- */
+
+int main(int argc, char **argv)
+{
+    /* SPI interfaces */
+    const char com_path_default[] = COM_PATH_DEFAULT;
+    const char * com_path = com_path_default;
+    lgw_com_type_t com_type = COM_TYPE_DEFAULT;
+
+    struct sigaction sigact; /* SIGQUIT&SIGINT&SIGTERM signal handling */
+
+    int i;
+    unsigned int arg_u;
+
+    /* concentrator variables */
+    uint8_t clocksource = 0;
+    lgw_radio_type_t radio_type = LGW_RADIO_TYPE_SX1250;
+    struct lgw_conf_board_s boardconf;
+    struct lgw_conf_rxrf_s rfconf;
+
+    /* serial variables */
+    char serial_buff[128]; /* buffer to receive GPS data */
+    size_t wr_idx = 0;     /* pointer to end of chars in buffer */
+    int gps_tty_dev; /* file descriptor to the serial port of the GNSS module */
+
+    /* NMEA/UBX variables */
+    enum gps_msg latest_msg; /* keep track of latest NMEA/UBX message parsed */
+
+    /* parse command line options */
+    while ((i = getopt (argc, argv, "hk:r:d:u")) != -1) {
+        switch (i) {
+            case 'h':
+                usage();
+                return -1;
+                break;
+            case 'd':
+                if (optarg != NULL) {
+                    com_path = optarg;
+                }
+                break;
+            case 'u':
+                com_type = LGW_COM_USB;
+                break;
+            case 'r': /* <uint> Radio type */
+                i = sscanf(optarg, "%u", &arg_u);
+                if ((i != 1) || ((arg_u != 1255) && (arg_u != 1257) && (arg_u != 1250))) {
+                    printf("ERROR: argument parsing of -r argument. Use -h to print help\n");
+                    return EXIT_FAILURE;
+                } else {
+                    switch (arg_u) {
+                        case 1255:
+                            radio_type = LGW_RADIO_TYPE_SX1255;
+                            break;
+                        case 1257:
+                            radio_type = LGW_RADIO_TYPE_SX1257;
+                            break;
+                        default: /* 1250 */
+                            radio_type = LGW_RADIO_TYPE_SX1250;
+                            break;
+                    }
+                }
+                break;
+            case 'k': /* <uint> Clock Source */
+                i = sscanf(optarg, "%u", &arg_u);
+                if ((i != 1) || (arg_u > 1)) {
+                    printf("ERROR: argument parsing of -k argument. Use -h to print help\n");
+                    return EXIT_FAILURE;
+                } else {
+                    clocksource = (uint8_t)arg_u;
+                }
+                break;
+            default:
+                printf("ERROR: argument parsing\n");
+                usage();
+                exit(EXIT_FAILURE);
+        }
+    }
+
+    /* configure signal handling */
+    sigemptyset(&sigact.sa_mask);
+    sigact.sa_flags = 0;
+    sigact.sa_handler = sig_handler;
+    sigaction(SIGQUIT, &sigact, NULL);
+    sigaction(SIGINT, &sigact, NULL);
+    sigaction(SIGTERM, &sigact, NULL);
+
+    /* Intro message and library information */
+    printf("Beginning of test for loragw_gps.c\n");
+    printf("*** Library version information ***\n%s\n***\n", lgw_version_info());
+
+    if (com_type == LGW_COM_SPI) {
+        /* Board reset */
+        if (system("./reset_lgw.sh start") != 0) {
+            printf("ERROR: failed to reset SX1302, check your reset_lgw.sh script\n");
+            exit(EXIT_FAILURE);
+        }
+    }
+
+    /* Open and configure GPS */
+    i = lgw_gps_enable("/dev/ttyAMA0", "ubx7", 0, &gps_tty_dev);
+    if (i != LGW_GPS_SUCCESS) {
+        printf("ERROR: Failed to enable GPS\n");
+        exit(EXIT_FAILURE);
+    }
+
+    /* start concentrator (default conf for IoT SK) */
+    /* board config */
+    memset(&boardconf, 0, sizeof(boardconf));
+    boardconf.lorawan_public = true;
+    boardconf.clksrc = clocksource;
+    boardconf.full_duplex = false;
+    boardconf.com_type = com_type;
+    strncpy(boardconf.com_path, com_path, sizeof boardconf.com_path);
+    boardconf.com_path[sizeof boardconf.com_path - 1] = '\0'; /* ensure string termination */
+    if (lgw_board_setconf(&boardconf) != LGW_HAL_SUCCESS) {
+        printf("ERROR: failed to configure board\n");
+        return EXIT_FAILURE;
+    }
+
+    /* set configuration for RF chains */
+    memset( &rfconf, 0, sizeof rfconf);
+    rfconf.enable = true;
+    rfconf.freq_hz = 868000000;
+    rfconf.rssi_offset = 0.0;
+    rfconf.type = radio_type;
+    rfconf.tx_enable = false;
+    rfconf.single_input_mode = false;
+    if (lgw_rxrf_setconf(0, &rfconf) != LGW_HAL_SUCCESS) {
+        printf("ERROR: failed to configure rxrf 0\n");
+        return EXIT_FAILURE;
+    }
+
+    memset( &rfconf, 0, sizeof rfconf);
+    rfconf.enable = true;
+    rfconf.freq_hz = 868000000;
+    rfconf.rssi_offset = 0.0;
+    rfconf.type = radio_type;
+    rfconf.tx_enable = false;
+    rfconf.single_input_mode = false;
+    if (lgw_rxrf_setconf(1, &rfconf) != LGW_HAL_SUCCESS) {
+        printf("ERROR: failed to configure rxrf 1\n");
+        return EXIT_FAILURE;
+    }
+
+    /* start */
+    if (lgw_start() != LGW_HAL_SUCCESS) {
+        printf("ERROR: IMPOSSIBLE TO START THE GATEWAY\n");
+        exit(EXIT_FAILURE);
+    }
+
+    /* initialize some variables before loop */
+    memset(serial_buff, 0, sizeof serial_buff);
+    memset(&ppm_ref, 0, sizeof ppm_ref);
+
+    /* loop until user action */
+    while ((quit_sig != 1) && (exit_sig != 1)) {
+        size_t rd_idx = 0;
+        size_t frame_end_idx = 0;
+
+        /* blocking non-canonical read on serial port */
+        ssize_t nb_char = read(gps_tty_dev, serial_buff + wr_idx, LGW_GPS_MIN_MSG_SIZE);
+        if (nb_char <= 0) {
+            printf("WARNING: [gps] read() returned value %zd\n", nb_char);
+            continue;
+        }
+        wr_idx += (size_t)nb_char;
+
+        /*******************************************
+         * Scan buffer for UBX/NMEA sync chars and *
+         * attempt to decode frame if one is found *
+         *******************************************/
+        while (rd_idx < wr_idx) {
+            size_t frame_size = 0;
+
+            /* Scan buffer for UBX sync char */
+            if (serial_buff[rd_idx] == (char)LGW_GPS_UBX_SYNC_CHAR) {
+
+                /***********************
+                 * Found UBX sync char *
+                 ***********************/
+                latest_msg = lgw_parse_ubx(&serial_buff[rd_idx], (wr_idx - rd_idx), &frame_size);
+
+                if (frame_size > 0) {
+                    if (latest_msg == INCOMPLETE) {
+                        /* UBX header found but frame appears to be missing bytes */
+                        frame_size = 0;
+                    } else if (latest_msg == INVALID) {
+                        /* message header received but message appears to be corrupted */
+                        printf("WARNING: [gps] could not get a valid message from GPS (no time)\n");
+                        frame_size = 0;
+                    } else if (latest_msg == UBX_NAV_TIMEGPS) {
+                        printf("\n~~ UBX NAV-TIMEGPS sentence, triggering synchronization attempt ~~\n");
+                        gps_process_sync();
+                    }
+                }
+            } else if(serial_buff[rd_idx] == (char)LGW_GPS_NMEA_SYNC_CHAR) {
+                /************************
+                 * Found NMEA sync char *
+                 ************************/
+                /* scan for NMEA end marker (LF = 0x0a) */
+                char* nmea_end_ptr = memchr(&serial_buff[rd_idx],(int)0x0a, (wr_idx - rd_idx));
+
+                if (nmea_end_ptr) {
+                    /* found end marker */
+                    frame_size = nmea_end_ptr - &serial_buff[rd_idx] + 1;
+                    latest_msg = lgw_parse_nmea(&serial_buff[rd_idx], frame_size);
+
+                    if(latest_msg == INVALID || latest_msg == UNKNOWN) {
+                        /* checksum failed */
+                        frame_size = 0;
+                    } else if (latest_msg == NMEA_RMC) { /* Get location from RMC frames */
+                        gps_process_coords();
+                    }
+                }
+            }
+
+            if (frame_size > 0) {
+                /* At this point message is a checksum verified frame
+                   we're processed or ignored. Remove frame from buffer */
+                rd_idx += frame_size;
+                frame_end_idx = rd_idx;
+            } else {
+                rd_idx++;
+            }
+        } /* ...for(rd_idx = 0... */
+
+        if (frame_end_idx) {
+          /* Frames have been processed. Remove bytes to end of last processed frame */
+          memcpy(serial_buff,&serial_buff[frame_end_idx],wr_idx - frame_end_idx);
+          wr_idx -= frame_end_idx;
+        } /* ...for(rd_idx = 0... */
+
+        /* Prevent buffer overflow */
+        if ((sizeof(serial_buff) - wr_idx) < LGW_GPS_MIN_MSG_SIZE) {
+            memcpy(serial_buff,&serial_buff[LGW_GPS_MIN_MSG_SIZE],wr_idx - LGW_GPS_MIN_MSG_SIZE);
+            wr_idx -= LGW_GPS_MIN_MSG_SIZE;
+        }
+    }
+
+    /* clean up before leaving */
+    if (exit_sig == 1) {
+        lgw_gps_disable(gps_tty_dev);
+        lgw_stop();
+    }
+
+    if (com_type == LGW_COM_SPI) {
+        /* Board reset */
+        if (system("./reset_lgw.sh stop") != 0) {
+            printf("ERROR: failed to reset SX1302, check your reset_lgw.sh script\n");
+            exit(EXIT_FAILURE);
+        }
+    }
+
+    printf("\nEnd of test for loragw_gps.c\n");
+    exit(EXIT_SUCCESS);
+}
+
+/* --- EOF ------------------------------------------------------------------ */
diff --git a/target.cfg b/target.cfg
deleted file mode 100644
index c55e132..0000000
--- a/target.cfg
+++ /dev/null
@@ -1,10 +0,0 @@
-# That file will be included in the Makefiles to configure where to install files on the target
-
-# The IP address of the gateway host on which the files need to be installed
-TARGET_IP=localhost
-
-# The directory on the gateway file system to which  the files need to be installed
-TARGET_DIR=/home/pi/sx1302_hal/bin
-
-# The user to be used by ssh/scp to copy the files on the gateway host
-TARGET_USR=pi
diff --git a/tools/node-red-registers.json b/tools/node-red-registers.json
index bd3e7b7..bbde23d 100644
--- a/tools/node-red-registers.json
+++ b/tools/node-red-registers.json
@@ -11,11 +11,11 @@
         "type": "file in",
         "z": "bf64d63f.630868",
         "name": "",
-        "filename": "/home/mcoracin/SHARE/sx1302_reg/common.json",
+        "filename": "/usr/local/lorawan-gateway/sx1302_reg/common.json",
         "format": "utf8",
         "chunk": false,
         "sendError": true,
-        "x": 390,
+        "x": 400,
         "y": 160,
         "wires": [
             [
@@ -44,13 +44,13 @@
         "type": "inject",
         "z": "bf64d63f.630868",
         "name": "common",
-        "topic": "common",
-        "payload": "true",
-        "payloadType": "bool",
         "repeat": "",
         "crontab": "",
         "once": false,
         "onceDelay": 0.1,
+        "topic": "common",
+        "payload": "true",
+        "payloadType": "bool",
         "x": 110,
         "y": 160,
         "wires": [
@@ -64,13 +64,13 @@
         "type": "inject",
         "z": "bf64d63f.630868",
         "name": "Init",
-        "topic": "",
-        "payload": "true",
-        "payloadType": "bool",
         "repeat": "",
         "crontab": "",
         "once": false,
         "onceDelay": 0.1,
+        "topic": "",
+        "payload": "true",
+        "payloadType": "bool",
         "x": 100,
         "y": 40,
         "wires": [
@@ -114,11 +114,11 @@
         "type": "file in",
         "z": "bf64d63f.630868",
         "name": "",
-        "filename": "/home/mcoracin/SHARE/sx1302_reg/agc_mcu.json",
+        "filename": "/usr/local/lorawan-gateway/sx1302_reg/agc_mcu.json",
         "format": "utf8",
         "chunk": false,
         "sendError": true,
-        "x": 390,
+        "x": 400,
         "y": 220,
         "wires": [
             [
@@ -147,13 +147,13 @@
         "type": "inject",
         "z": "bf64d63f.630868",
         "name": "agc_mcu",
-        "topic": "agc_mcu",
-        "payload": "true",
-        "payloadType": "bool",
         "repeat": "",
         "crontab": "",
         "once": false,
         "onceDelay": 0.1,
+        "topic": "agc_mcu",
+        "payload": "true",
+        "payloadType": "bool",
         "x": 110,
         "y": 220,
         "wires": [
@@ -167,13 +167,13 @@
         "type": "inject",
         "z": "bf64d63f.630868",
         "name": "Create files",
-        "topic": "",
-        "payload": "true",
-        "payloadType": "bool",
         "repeat": "",
         "crontab": "",
         "once": false,
         "onceDelay": 0.1,
+        "topic": "",
+        "payload": "true",
+        "payloadType": "bool",
         "x": 110,
         "y": 940,
         "wires": [
@@ -203,13 +203,15 @@
         "type": "file",
         "z": "bf64d63f.630868",
         "name": "",
-        "filename": "/home/mcoracin/SHARE/sx1302_reg/sx1302_reg.h",
+        "filename": "/usr/local/lorawan-gateway/sx1302_reg/sx1302_reg.h",
         "appendNewline": true,
         "createDir": false,
         "overwriteFile": "true",
-        "x": 620,
+        "x": 630,
         "y": 940,
-        "wires": []
+        "wires": [
+            []
+        ]
     },
     {
         "id": "aae4ac70.472438",
@@ -230,11 +232,11 @@
         "type": "file in",
         "z": "bf64d63f.630868",
         "name": "",
-        "filename": "/home/mcoracin/SHARE/sx1302_reg/rif_top_mux.json",
+        "filename": "/usr/local/lorawan-gateway/sx1302_reg/rif_top_mux.json",
         "format": "utf8",
         "chunk": false,
         "sendError": true,
-        "x": 420,
+        "x": 430,
         "y": 100,
         "wires": [
             [
@@ -263,13 +265,13 @@
         "type": "inject",
         "z": "bf64d63f.630868",
         "name": "rif_top_mux",
-        "topic": "",
-        "payload": "true",
-        "payloadType": "bool",
         "repeat": "",
         "crontab": "",
         "once": false,
         "onceDelay": 0.1,
+        "topic": "",
+        "payload": "true",
+        "payloadType": "bool",
         "x": 120,
         "y": 100,
         "wires": [
@@ -313,7 +315,7 @@
         "type": "file in",
         "z": "bf64d63f.630868",
         "name": "",
-        "filename": "/home/mcoracin/SHARE/sx1302_reg/clk_ctrl.json",
+        "filename": "/usr/local/lorawan-gateway/sx1302_reg/clk_ctrl.json",
         "format": "utf8",
         "chunk": false,
         "sendError": true,
@@ -346,13 +348,13 @@
         "type": "inject",
         "z": "bf64d63f.630868",
         "name": "clk_ctrl",
-        "topic": "clk_ctrl",
-        "payload": "true",
-        "payloadType": "bool",
         "repeat": "",
         "crontab": "",
         "once": false,
         "onceDelay": 0.1,
+        "topic": "clk_ctrl",
+        "payload": "true",
+        "payloadType": "bool",
         "x": 100,
         "y": 280,
         "wires": [
@@ -366,11 +368,11 @@
         "type": "file in",
         "z": "bf64d63f.630868",
         "name": "",
-        "filename": "/home/mcoracin/SHARE/sx1302_reg/tx_top.json",
+        "filename": "/usr/local/lorawan-gateway/sx1302_reg/tx_top.json",
         "format": "utf8",
         "chunk": false,
         "sendError": true,
-        "x": 380,
+        "x": 390,
         "y": 340,
         "wires": [
             [
@@ -399,13 +401,13 @@
         "type": "inject",
         "z": "bf64d63f.630868",
         "name": "tx_top_a",
-        "topic": "tx_top_a",
-        "payload": "true",
-        "payloadType": "bool",
         "repeat": "",
         "crontab": "",
         "once": false,
         "onceDelay": 0.1,
+        "topic": "tx_top_a",
+        "payload": "true",
+        "payloadType": "bool",
         "x": 110,
         "y": 340,
         "wires": [
@@ -419,11 +421,11 @@
         "type": "file in",
         "z": "bf64d63f.630868",
         "name": "",
-        "filename": "/home/mcoracin/SHARE/sx1302_reg/tx_top.json",
+        "filename": "/usr/local/lorawan-gateway/sx1302_reg/tx_top.json",
         "format": "utf8",
         "chunk": false,
         "sendError": true,
-        "x": 380,
+        "x": 390,
         "y": 400,
         "wires": [
             [
@@ -452,13 +454,13 @@
         "type": "inject",
         "z": "bf64d63f.630868",
         "name": "tx_top_b",
-        "topic": "tx_top_b",
-        "payload": "true",
-        "payloadType": "bool",
         "repeat": "",
         "crontab": "",
         "once": false,
         "onceDelay": 0.1,
+        "topic": "tx_top_b",
+        "payload": "true",
+        "payloadType": "bool",
         "x": 110,
         "y": 400,
         "wires": [
@@ -488,7 +490,7 @@
         "type": "file in",
         "z": "bf64d63f.630868",
         "name": "",
-        "filename": "/home/mcoracin/SHARE/sx1302_reg/gpio.json",
+        "filename": "/usr/local/lorawan-gateway/sx1302_reg/gpio.json",
         "format": "utf8",
         "chunk": false,
         "sendError": true,
@@ -521,13 +523,13 @@
         "type": "inject",
         "z": "bf64d63f.630868",
         "name": "gpio",
-        "topic": "gpio",
-        "payload": "true",
-        "payloadType": "bool",
         "repeat": "",
         "crontab": "",
         "once": false,
         "onceDelay": 0.1,
+        "topic": "gpio",
+        "payload": "true",
+        "payloadType": "bool",
         "x": 100,
         "y": 460,
         "wires": [
@@ -541,7 +543,7 @@
         "type": "file in",
         "z": "bf64d63f.630868",
         "name": "",
-        "filename": "/home/mcoracin/SHARE/sx1302_reg/timestamp.json",
+        "filename": "/usr/local/lorawan-gateway/sx1302_reg/timestamp.json",
         "format": "utf8",
         "chunk": false,
         "sendError": true,
@@ -574,13 +576,13 @@
         "type": "inject",
         "z": "bf64d63f.630868",
         "name": "timestamp",
-        "topic": "timestamp",
-        "payload": "true",
-        "payloadType": "bool",
         "repeat": "",
         "crontab": "",
         "once": false,
         "onceDelay": 0.1,
+        "topic": "timestamp",
+        "payload": "true",
+        "payloadType": "bool",
         "x": 110,
         "y": 520,
         "wires": [
@@ -594,11 +596,11 @@
         "type": "file in",
         "z": "bf64d63f.630868",
         "name": "",
-        "filename": "/home/mcoracin/SHARE/sx1302_reg/rx_top.json",
+        "filename": "/usr/local/lorawan-gateway/sx1302_reg/rx_top.json",
         "format": "utf8",
         "chunk": false,
         "sendError": true,
-        "x": 380,
+        "x": 390,
         "y": 580,
         "wires": [
             [
@@ -627,13 +629,13 @@
         "type": "inject",
         "z": "bf64d63f.630868",
         "name": "rx_top",
-        "topic": "rx_top",
-        "payload": "true",
-        "payloadType": "bool",
         "repeat": "",
         "crontab": "",
         "once": false,
         "onceDelay": 0.1,
+        "topic": "rx_top",
+        "payload": "true",
+        "payloadType": "bool",
         "x": 100,
         "y": 580,
         "wires": [
@@ -647,11 +649,11 @@
         "type": "file in",
         "z": "bf64d63f.630868",
         "name": "",
-        "filename": "/home/mcoracin/SHARE/sx1302_reg/arb_mcu.json",
+        "filename": "/usr/local/lorawan-gateway/sx1302_reg/arb_mcu.json",
         "format": "utf8",
         "chunk": false,
         "sendError": true,
-        "x": 390,
+        "x": 400,
         "y": 640,
         "wires": [
             [
@@ -680,13 +682,13 @@
         "type": "inject",
         "z": "bf64d63f.630868",
         "name": "arb_mcu",
-        "topic": "arb_mcu",
-        "payload": "true",
-        "payloadType": "bool",
         "repeat": "",
         "crontab": "",
         "once": false,
         "onceDelay": 0.1,
+        "topic": "arb_mcu",
+        "payload": "true",
+        "payloadType": "bool",
         "x": 110,
         "y": 640,
         "wires": [
@@ -700,11 +702,11 @@
         "type": "file in",
         "z": "bf64d63f.630868",
         "name": "",
-        "filename": "/home/mcoracin/SHARE/sx1302_reg/radio_fe.json",
+        "filename": "/usr/local/lorawan-gateway/sx1302_reg/radio_fe.json",
         "format": "utf8",
         "chunk": false,
         "sendError": true,
-        "x": 390,
+        "x": 400,
         "y": 700,
         "wires": [
             [
@@ -733,13 +735,13 @@
         "type": "inject",
         "z": "bf64d63f.630868",
         "name": "radio_fe",
-        "topic": "radio_fe",
-        "payload": "true",
-        "payloadType": "bool",
         "repeat": "",
         "crontab": "",
         "once": false,
         "onceDelay": 0.1,
+        "topic": "radio_fe",
+        "payload": "true",
+        "payloadType": "bool",
         "x": 110,
         "y": 700,
         "wires": [
@@ -753,11 +755,11 @@
         "type": "file in",
         "z": "bf64d63f.630868",
         "name": "",
-        "filename": "/home/mcoracin/SHARE/sx1302_reg/otp.json",
+        "filename": "/usr/local/lorawan-gateway/sx1302_reg/otp.json",
         "format": "utf8",
         "chunk": false,
         "sendError": true,
-        "x": 360,
+        "x": 370,
         "y": 760,
         "wires": [
             [
@@ -786,13 +788,13 @@
         "type": "inject",
         "z": "bf64d63f.630868",
         "name": "otp",
-        "topic": "otp",
-        "payload": "true",
-        "payloadType": "bool",
         "repeat": "",
         "crontab": "",
         "once": false,
         "onceDelay": 0.1,
+        "topic": "otp",
+        "payload": "true",
+        "payloadType": "bool",
         "x": 100,
         "y": 760,
         "wires": [
@@ -806,11 +808,11 @@
         "type": "file in",
         "z": "bf64d63f.630868",
         "name": "",
-        "filename": "/home/mcoracin/SHARE/sx1302_reg/rx_top_lora_service_fsk.json",
+        "filename": "/usr/local/lorawan-gateway/sx1302_reg/rx_top_lora_service_fsk.json",
         "format": "utf8",
         "chunk": false,
         "sendError": true,
-        "x": 500,
+        "x": 510,
         "y": 820,
         "wires": [
             [
@@ -839,13 +841,13 @@
         "type": "inject",
         "z": "bf64d63f.630868",
         "name": "rx_top_lora_service_fsk",
-        "topic": "rx_top_lora_service_fsk",
-        "payload": "true",
-        "payloadType": "bool",
         "repeat": "",
         "crontab": "",
         "once": false,
         "onceDelay": 0.1,
+        "topic": "rx_top_lora_service_fsk",
+        "payload": "true",
+        "payloadType": "bool",
         "x": 150,
         "y": 820,
         "wires": [
@@ -859,11 +861,11 @@
         "type": "file in",
         "z": "bf64d63f.630868",
         "name": "",
-        "filename": "/home/mcoracin/SHARE/sx1302_reg/capture_ram.json",
+        "filename": "/usr/local/lorawan-gateway/sx1302_reg/capture_ram.json",
         "format": "utf8",
         "chunk": false,
         "sendError": true,
-        "x": 410,
+        "x": 420,
         "y": 880,
         "wires": [
             [
@@ -892,13 +894,13 @@
         "type": "inject",
         "z": "bf64d63f.630868",
         "name": "capture_ram",
-        "topic": "capture_ram",
-        "payload": "true",
-        "payloadType": "bool",
         "repeat": "",
         "crontab": "",
         "once": false,
         "onceDelay": 0.1,
+        "topic": "capture_ram",
+        "payload": "true",
+        "payloadType": "bool",
         "x": 120,
         "y": 880,
         "wires": [
@@ -911,6 +913,7 @@
         "id": "56ed912a.91d118",
         "type": "trigger",
         "z": "bf64d63f.630868",
+        "name": "",
         "op1": "1",
         "op2": "0",
         "op1type": "val",
@@ -920,11 +923,11 @@
         "units": "ms",
         "reset": "",
         "bytopic": "all",
-        "name": "",
+        "outputs": 1,
         "x": 1020,
         "y": 500,
         "wires": [
             []
         ]
     }
-]
\ No newline at end of file
+]
diff --git a/tools/payload_tools/Makefile b/tools/payload_tools/Makefile
index ed5e5fe..c57a508 100644
--- a/tools/payload_tools/Makefile
+++ b/tools/payload_tools/Makefile
@@ -1,61 +1,76 @@
-### get external defined data
-
-include ../../target.cfg
-
-### constant symbols
+### Environment constants
 
+LGW_PATH ?= ../../libloragw
+LIB_PATH ?= ../../libtools
 ARCH ?=
 CROSS_COMPILE ?=
+
+OBJDIR = obj
+INCLUDES = $(wildcard inc/*.h)
+
+### External constant definitions
+# must get library build option to know if mpsse must be linked or not
+
+include $(LGW_PATH)/library.cfg
+RELEASE_VERSION := `cat ../VERSION`
+
+### Constant symbols
+
 CC := $(CROSS_COMPILE)gcc
 AR := $(CROSS_COMPILE)ar
 
-CFLAGS := -O2 -Wall -Wextra -std=c99 -I. -I../../libtools/inc
+CFLAGS := -O2 -Wall -Wextra -std=c99 -Iinc -I. -I../libtools/inc
+VFLAG := -D VERSION_STRING="\"$(RELEASE_VERSION)\""
 
-### linking options
+### Constants for Lora concentrator HAL library
+# List the library sub-modules that are used by the application
 
-LIBS := -ltinymt32
+LGW_INC =
+ifneq ($(wildcard $(LGW_PATH)/inc/config.h),)
+  # only for HAL version 1.3 and beyond
+  LGW_INC += $(LGW_PATH)/inc/config.h
+endif
+LGW_INC += $(LGW_PATH)/inc/loragw_hal.h
+
+### Linking options
 
-### general build targets
+LIBS := -lloragw -ltinymt32 -lparson -lbase64 -lrt -lpthread -lm
+
+### General build targets
 
 all: payload_crc payload_diff payload_gen
 
 clean:
 	rm -f payload_crc payload_diff payload_gen
-	rm -f *.o
-
-install:
-ifneq ($(strip $(TARGET_IP)),)
- ifneq ($(strip $(TARGET_DIR)),)
-  ifneq ($(strip $(TARGET_USR)),)
-	@echo "---- Copying payload tools files to $(TARGET_IP):$(TARGET_DIR)"
-	@ssh $(TARGET_USR)@$(TARGET_IP) "mkdir -p $(TARGET_DIR)"
-	@scp payload_crc $(TARGET_USR)@$(TARGET_IP):$(TARGET_DIR)
-	@scp payload_diff $(TARGET_USR)@$(TARGET_IP):$(TARGET_DIR)
-	@scp payload_gen $(TARGET_USR)@$(TARGET_IP):$(TARGET_DIR)
-  else
-	@echo "ERROR: TARGET_USR is not configured in target.cfg"
-  endif
- else
-	@echo "ERROR: TARGET_DIR is not configured in target.cfg"
- endif
-else
-	@echo "ERROR: TARGET_IP is not configured in target.cfg"
-endif
+	rm -f $(OBJDIR)/*.o
+	
+### Sub-modules compilation
+
+$(OBJDIR):
+	mkdir -p $(OBJDIR)
+
+$(OBJDIR)/%.o: %.c $(INCLUDES) | $(OBJDIR)
+	$(CC) -c $(CFLAGS) -I$(LGW_PATH)/inc $< -o $@
+
+### Main program compilation and assembly
 
-### rules
+ 
+$(OBJDIR)/payload_crc.o: payload_crc.c $(LGW_INC) $(INCLUDES) | $(OBJDIR)
+	$(CC) -c $(CFLAGS) $(VFLAG) -I$(LGW_PATH)/inc $< -o $@
 
-%.o : %.c
-	$(CC) -c $(CFLAGS) $< -o $@
+$(OBJDIR)/payload_diff.o: payload_crc.c $(LGW_INC) $(INCLUDES) | $(OBJDIR)
+	$(CC) -c $(CFLAGS) $(VFLAG) -I$(LGW_PATH)/inc $< -o $@
 
-### test programs
+$(OBJDIR)/payload_gen.o: payload_crc.c $(LGW_INC) $(INCLUDES) | $(OBJDIR)
+	$(CC) -c $(CFLAGS) $(VFLAG) -I$(LGW_PATH)/inc $< -o $@
 
-payload_crc: payload_crc.o
-	$(CC) $(CFLAGS) -o $@ $^
+payload_crc: $(OBJDIR)/payload_crc.o $(LGW_PATH)/libloragw.a 
+	$(CC) -L$(LGW_PATH) -L$(LIB_PATH) $< -o $@ $(LIBS) 
 
-payload_diff: payload_diff.o
-	$(CC) $(CFLAGS) -o $@ $^
+payload_diff: $(OBJDIR)/payload_diff.o $(LGW_PATH)/libloragw.a 
+	$(CC) -L$(LGW_PATH) -L$(LIB_PATH) $< -o $@ $(LIBS) 
 
-payload_gen: payload_gen.o
-	$(CC) $(CFLAGS) -L../../libtools -o $@ $^ $(LIBS)
+payload_gen: $(OBJDIR)/payload_gen.o $(LGW_PATH)/libloragw.a 
+	$(CC) -L$(LGW_PATH) -L$(LIB_PATH) $< -o $@ $(LIBS) 
 
 ### EOF
diff --git a/tools/reset_lgw.sh b/tools/reset_lgw.sh
deleted file mode 100755
index b58f0e9..0000000
--- a/tools/reset_lgw.sh
+++ /dev/null
@@ -1,93 +0,0 @@
-#!/bin/sh
-
-# This script is intended to be used on SX1302 CoreCell platform, it performs
-# the following actions:
-#       - export/unpexort GPIO23 and GPIO18 used to reset the SX1302 chip and to enable the LDOs
-#       - export/unexport GPIO22 used to reset the optional SX1261 radio used for LBT/Spectral Scan
-#
-# Usage examples:
-#       ./reset_lgw.sh stop
-#       ./reset_lgw.sh start
-
-# GPIO mapping has to be adapted with HW
-#
-
-SX1302_RESET_PIN=23     # SX1302 reset
-SX1302_POWER_EN_PIN=18  # SX1302 power enable
-SX1261_RESET_PIN=22     # SX1261 reset (LBT / Spectral Scan)
-AD5338R_RESET_PIN=13    # AD5338R reset (full-duplex CN490 reference design)
-
-WAIT_GPIO() {
-    sleep 0.1
-}
-
-init() {
-    # setup GPIOs
-    echo "$SX1302_RESET_PIN" > /sys/class/gpio/export; WAIT_GPIO
-    echo "$SX1261_RESET_PIN" > /sys/class/gpio/export; WAIT_GPIO
-    echo "$SX1302_POWER_EN_PIN" > /sys/class/gpio/export; WAIT_GPIO
-    echo "$AD5338R_RESET_PIN" > /sys/class/gpio/export; WAIT_GPIO
-
-    # set GPIOs as output
-    echo "out" > /sys/class/gpio/gpio$SX1302_RESET_PIN/direction; WAIT_GPIO
-    echo "out" > /sys/class/gpio/gpio$SX1261_RESET_PIN/direction; WAIT_GPIO
-    echo "out" > /sys/class/gpio/gpio$SX1302_POWER_EN_PIN/direction; WAIT_GPIO
-    echo "out" > /sys/class/gpio/gpio$AD5338R_RESET_PIN/direction; WAIT_GPIO
-}
-
-reset() {
-    echo "CoreCell reset through GPIO$SX1302_RESET_PIN..."
-    echo "SX1261 reset through GPIO$SX1302_RESET_PIN..."
-    echo "CoreCell power enable through GPIO$SX1302_POWER_EN_PIN..."
-    echo "CoreCell ADC reset through GPIO$AD5338R_RESET_PIN..."
-
-    # write output for SX1302 CoreCell power_enable and reset
-    echo "1" > /sys/class/gpio/gpio$SX1302_POWER_EN_PIN/value; WAIT_GPIO
-
-    echo "1" > /sys/class/gpio/gpio$SX1302_RESET_PIN/value; WAIT_GPIO
-    echo "0" > /sys/class/gpio/gpio$SX1302_RESET_PIN/value; WAIT_GPIO
-
-    echo "0" > /sys/class/gpio/gpio$SX1261_RESET_PIN/value; WAIT_GPIO
-    echo "1" > /sys/class/gpio/gpio$SX1261_RESET_PIN/value; WAIT_GPIO
-
-    echo "0" > /sys/class/gpio/gpio$AD5338R_RESET_PIN/value; WAIT_GPIO
-    echo "1" > /sys/class/gpio/gpio$AD5338R_RESET_PIN/value; WAIT_GPIO
-}
-
-term() {
-    # cleanup all GPIOs
-    if [ -d /sys/class/gpio/gpio$SX1302_RESET_PIN ]
-    then
-        echo "$SX1302_RESET_PIN" > /sys/class/gpio/unexport; WAIT_GPIO
-    fi
-    if [ -d /sys/class/gpio/gpio$SX1261_RESET_PIN ]
-    then
-        echo "$SX1261_RESET_PIN" > /sys/class/gpio/unexport; WAIT_GPIO
-    fi
-    if [ -d /sys/class/gpio/gpio$SX1302_POWER_EN_PIN ]
-    then
-        echo "$SX1302_POWER_EN_PIN" > /sys/class/gpio/unexport; WAIT_GPIO
-    fi
-    if [ -d /sys/class/gpio/gpio$AD5338R_RESET_PIN ]
-    then
-        echo "$AD5338R_RESET_PIN" > /sys/class/gpio/unexport; WAIT_GPIO
-    fi
-}
-
-case "$1" in
-    start)
-    term # just in case
-    init
-    reset
-    ;;
-    stop)
-    reset
-    term
-    ;;
-    *)
-    echo "Usage: $0 {start|stop}"
-    exit 1
-    ;;
-esac
-
-exit 0
\ No newline at end of file
diff --git a/tools/systemd/lora_pkt_fwd.service b/tools/systemd/lora_pkt_fwd.service
index a95280c..8b8f486 100644
--- a/tools/systemd/lora_pkt_fwd.service
+++ b/tools/systemd/lora_pkt_fwd.service
@@ -1,12 +1,10 @@
 [Unit]
 Description=LoRa Packet Forwarder
-After=network-online.target
-Wants=network-online.target
 
 [Service]
 Type=simple
-WorkingDirectory=/home/pi/sx1302_hal/bin
-ExecStart=/home/pi/sx1302_hal/bin/lora_pkt_fwd -c /home/pi/sx1302_hal/bin/global_conf.json.sx1250.EU868
+WorkingDirectory=/usr/local/lorawan-gateway/lora-gateway/
+ExecStart=/usr/local/lorawan-gateway/lora-gateway/lora_pkt_fwd -c /usr/local/lorawan-gateway/lora-gateway/global_conf.json
 Restart=always
 RestartSec=30
 StandardOutput=syslog
diff --git a/util_boot/Makefile b/util_boot/Makefile
index 399db85..d3a5599 100644
--- a/util_boot/Makefile
+++ b/util_boot/Makefile
@@ -1,50 +1,30 @@
-### get external defined data
-
-include ../target.cfg
+APP_NAME := boot
 
-### User defined build options
+## User defined build options
 
+LGW_PATH ?= ../libloragw
+LIB_PATH ?= ../libtools
 ARCH ?=
 CROSS_COMPILE ?=
-BUILD_MODE := release
+ 
 OBJDIR = obj
+INCLUDES = $(wildcard inc/*.h)
 
-### ----- AVOID MODIFICATIONS BELLOW ------ AVOID MODIFICATIONS BELLOW ----- ###
-
-ifeq '$(BUILD_MODE)' 'alpha'
-  $(warning /\/\/\/ Building in 'alpha' mode \/\/\/\)
-  WARN_CFLAGS   :=
-  OPT_CFLAGS    := -O0
-  DEBUG_CFLAGS  := -g
-  LDFLAGS       :=
-else ifeq '$(BUILD_MODE)' 'debug'
-  $(warning /\/\/\/  Building in 'debug' mode \/\/\/\)
-  WARN_CFLAGS   := -Wall -Wextra
-  OPT_CFLAGS    := -O2
-  DEBUG_CFLAGS  := -g
-  LDFLAGS       :=
-else ifeq  '$(BUILD_MODE)' 'release'
-  $(warning /\/\/\/  Building in 'release' mode \/\/\/\)
-  WARN_CFLAGS   := -Wall -Wextra
-  OPT_CFLAGS    := -O2 -ffunction-sections -fdata-sections
-  DEBUG_CFLAGS  :=
-  LDFLAGS       := -Wl,--gc-sections
-else
-  $(error BUILD_MODE must be set to either 'alpha', 'debug' or 'release')
-endif
-
-### Application-specific variables
-APP_NAME := boot
-APP_LIBS := -lloragw -lm -ltinymt32 -lrt
+include $(LGW_PATH)/library.cfg
+RELEASE_VERSION := `cat ../VERSION`
 
-### Environment constants
-LIB_PATH := ../libloragw
 
 ### Expand build options
-CFLAGS := -std=c99 $(WARN_CFLAGS) $(OPT_CFLAGS) $(DEBUG_CFLAGS)
+
 CC := $(CROSS_COMPILE)gcc
 AR := $(CROSS_COMPILE)ar
 
+CFLAGS := -O2 -Wall -Wextra -std=c99 -Iinc -I. -I../libtools/inc
+
+LIBS := -lloragw -ltinymt32 -lparson -lbase64 -lrt -lpthread -lm
+
+VFLAG := -D VERSION_STRING="\"$(RELEASE_VERSION)\""
+
 ### General build targets
 all: $(APP_NAME)
 
@@ -52,32 +32,18 @@ clean:
 	rm -f obj/*.o
 	rm -f $(APP_NAME)
 
-install:
-ifneq ($(strip $(TARGET_IP)),)
- ifneq ($(strip $(TARGET_DIR)),)
-  ifneq ($(strip $(TARGET_USR)),)
-	@echo "---- Copying boot files to $(TARGET_IP):$(TARGET_DIR)"
-	@ssh $(TARGET_USR)@$(TARGET_IP) "mkdir -p $(TARGET_DIR)"
-	@scp boot $(TARGET_USR)@$(TARGET_IP):$(TARGET_DIR)
-  else
-	@echo "ERROR: TARGET_USR is not configured in target.cfg"
-  endif
- else
-	@echo "ERROR: TARGET_DIR is not configured in target.cfg"
- endif
-else
-	@echo "ERROR: TARGET_IP is not configured in target.cfg"
-endif
-
 $(OBJDIR):
 	mkdir -p $(OBJDIR)
 
+$(OBJDIR)/%.o: src/%.c $(INCLUDES) | $(OBJDIR)
+	$(CC) -c $(CFLAGS) -I$(LGW_PATH)/inc $< -o $@
+
 ### Compile main program
-$(OBJDIR)/$(APP_NAME).o: src/$(APP_NAME).c | $(OBJDIR)
-	$(CC) -c $< -o $@ $(CFLAGS) -Iinc -I../libloragw/inc
+$(OBJDIR)/$(APP_NAME).o: src/$(APP_NAME).c $(LGW_INC) $(INCLUDES) | $(OBJDIR)
+	$(CC) -c $(CFLAGS) $(VFLAG) -I$(LGW_PATH)/inc $< -o $@
 
 ### Link everything together
-$(APP_NAME): $(OBJDIR)/$(APP_NAME).o $(LIB_PATH)/libloragw.a
-	$(CC) -L$(LIB_PATH) -L../libtools $^ -o $@ $(LDFLAGS) $(APP_LIBS)
+$(APP_NAME): $(OBJDIR)/$(APP_NAME).o $(LGW_PATH)/libloragw.a  
+	$(CC) -L$(LGW_PATH) -L$(LIB_PATH) -L../libtools $<  -o $@ $(LIBS)
 
 ### EOF
diff --git a/util_chip_id/Makefile b/util_chip_id/Makefile
index 50b110c..ced21ac 100644
--- a/util_chip_id/Makefile
+++ b/util_chip_id/Makefile
@@ -1,50 +1,29 @@
-### get external defined data
-
-include ../target.cfg
-
+APP_NAME := chip_id
 ### User defined build options
 
+LGW_PATH ?= ../libloragw
+LIB_PATH ?= ../libtools
 ARCH ?=
 CROSS_COMPILE ?=
-BUILD_MODE := release
+ 
 OBJDIR = obj
+INCLUDES = $(wildcard inc/*.h)
 
-### ----- AVOID MODIFICATIONS BELLOW ------ AVOID MODIFICATIONS BELLOW ----- ###
-
-ifeq '$(BUILD_MODE)' 'alpha'
-  $(warning /\/\/\/ Building in 'alpha' mode \/\/\/\)
-  WARN_CFLAGS   :=
-  OPT_CFLAGS    := -O0
-  DEBUG_CFLAGS  := -g
-  LDFLAGS       :=
-else ifeq '$(BUILD_MODE)' 'debug'
-  $(warning /\/\/\/  Building in 'debug' mode \/\/\/\)
-  WARN_CFLAGS   := -Wall -Wextra
-  OPT_CFLAGS    := -O2
-  DEBUG_CFLAGS  := -g
-  LDFLAGS       :=
-else ifeq  '$(BUILD_MODE)' 'release'
-  $(warning /\/\/\/  Building in 'release' mode \/\/\/\)
-  WARN_CFLAGS   := -Wall -Wextra
-  OPT_CFLAGS    := -O2 -ffunction-sections -fdata-sections
-  DEBUG_CFLAGS  :=
-  LDFLAGS       := -Wl,--gc-sections
-else
-  $(error BUILD_MODE must be set to either 'alpha', 'debug' or 'release')
-endif
-
-### Application-specific variables
-APP_NAME := chip_id
-APP_LIBS := -lloragw -lm -ltinymt32 -lrt
+include $(LGW_PATH)/library.cfg
+RELEASE_VERSION := `cat ../VERSION`
 
-### Environment constants
-LIB_PATH := ../libloragw
 
 ### Expand build options
-CFLAGS := -std=c99 $(WARN_CFLAGS) $(OPT_CFLAGS) $(DEBUG_CFLAGS)
+
 CC := $(CROSS_COMPILE)gcc
 AR := $(CROSS_COMPILE)ar
 
+CFLAGS := -O2 -Wall -Wextra -std=c99 -Iinc -I. -I../libtools/inc
+
+LIBS := -lloragw -ltinymt32 -lparson -lbase64 -lrt -lpthread -lm
+
+VFLAG := -D VERSION_STRING="\"$(RELEASE_VERSION)\""
+
 ### General build targets
 all: $(APP_NAME)
 
@@ -52,32 +31,18 @@ clean:
 	rm -f obj/*.o
 	rm -f $(APP_NAME)
 
-install:
-ifneq ($(strip $(TARGET_IP)),)
- ifneq ($(strip $(TARGET_DIR)),)
-  ifneq ($(strip $(TARGET_USR)),)
-	@echo "---- Copying chip_id files to $(TARGET_IP):$(TARGET_DIR)"
-	@ssh $(TARGET_USR)@$(TARGET_IP) "mkdir -p $(TARGET_DIR)"
-	@scp chip_id $(TARGET_USR)@$(TARGET_IP):$(TARGET_DIR)
-  else
-	@echo "ERROR: TARGET_USR is not configured in target.cfg"
-  endif
- else
-	@echo "ERROR: TARGET_DIR is not configured in target.cfg"
- endif
-else
-	@echo "ERROR: TARGET_IP is not configured in target.cfg"
-endif
-
 $(OBJDIR):
 	mkdir -p $(OBJDIR)
 
+$(OBJDIR)/%.o: src/%.c $(INCLUDES) | $(OBJDIR)
+	$(CC) -c $(CFLAGS) -I$(LGW_PATH)/inc $< -o $@
+
 ### Compile main program
-$(OBJDIR)/$(APP_NAME).o: src/$(APP_NAME).c | $(OBJDIR)
-	$(CC) -c $< -o $@ $(CFLAGS) -Iinc -I../libloragw/inc
+$(OBJDIR)/$(APP_NAME).o: src/$(APP_NAME).c $(LGW_INC) $(INCLUDES) | $(OBJDIR)
+	$(CC) -c $(CFLAGS) $(VFLAG) -I$(LGW_PATH)/inc $< -o $@
 
 ### Link everything together
-$(APP_NAME): $(OBJDIR)/$(APP_NAME).o $(LIB_PATH)/libloragw.a
-	$(CC) -L$(LIB_PATH) -L../libtools $^ -o $@ $(LDFLAGS) $(APP_LIBS)
+$(APP_NAME): $(OBJDIR)/$(APP_NAME).o $(LGW_PATH)/libloragw.a  
+	$(CC) -L$(LGW_PATH) -L$(LIB_PATH) -L../libtools $<  -o $@ $(LIBS)
 
 ### EOF
diff --git a/util_net_downlink/Makefile b/util_net_downlink/Makefile
index 01829d2..4d5858b 100644
--- a/util_net_downlink/Makefile
+++ b/util_net_downlink/Makefile
@@ -1,50 +1,33 @@
-### get external defined data
+ 
+APP_NAME := net_downlink
+
 
-include ../target.cfg
 
 ### User defined build options
 
+LGW_PATH ?= ../libloragw
+LIB_PATH ?= ../libtools
 ARCH ?=
 CROSS_COMPILE ?=
-BUILD_MODE := release
+ 
 OBJDIR = obj
+INCLUDES = $(wildcard inc/*.h)
 
-### ----- AVOID MODIFICATIONS BELLOW ------ AVOID MODIFICATIONS BELLOW ----- ###
-
-ifeq '$(BUILD_MODE)' 'alpha'
-  $(warning /\/\/\/ Building in 'alpha' mode \/\/\/\)
-  WARN_CFLAGS   :=
-  OPT_CFLAGS    := -O0
-  DEBUG_CFLAGS  := -g
-  LDFLAGS       :=
-else ifeq '$(BUILD_MODE)' 'debug'
-  $(warning /\/\/\/  Building in 'debug' mode \/\/\/\)
-  WARN_CFLAGS   := -Wall -Wextra
-  OPT_CFLAGS    := -O2
-  DEBUG_CFLAGS  := -g
-  LDFLAGS       :=
-else ifeq  '$(BUILD_MODE)' 'release'
-  $(warning /\/\/\/  Building in 'release' mode \/\/\/\)
-  WARN_CFLAGS   := -Wall -Wextra
-  OPT_CFLAGS    := -O2 -ffunction-sections -fdata-sections
-  DEBUG_CFLAGS  :=
-  LDFLAGS       := -Wl,--gc-sections
-else
-  $(error BUILD_MODE must be set to either 'alpha', 'debug' or 'release')
-endif
-
-### Application-specific variables
-APP_NAME := net_downlink
-APP_LIBS := -lparson -lbase64 -lpthread
+include $(LGW_PATH)/library.cfg
+RELEASE_VERSION := `cat ../VERSION`
 
-### Environment constants
-LIB_PATH := ../libtools
 
 ### Expand build options
-CFLAGS := -std=c99 $(WARN_CFLAGS) $(OPT_CFLAGS) $(DEBUG_CFLAGS)
+
 CC := $(CROSS_COMPILE)gcc
 AR := $(CROSS_COMPILE)ar
 
+CFLAGS := -O2 -Wall -Wextra -std=c99 -Iinc -I. -I../libtools/inc
+
+LIBS := -lloragw -ltinymt32 -lparson -lbase64 -lrt -lpthread -lm
+
+VFLAG := -D VERSION_STRING="\"$(RELEASE_VERSION)\""
+
 ### General build targets
 all: $(APP_NAME)
 
@@ -52,32 +35,18 @@ clean:
 	rm -f obj/*.o
 	rm -f $(APP_NAME)
 
-install:
-ifneq ($(strip $(TARGET_IP)),)
- ifneq ($(strip $(TARGET_DIR)),)
-  ifneq ($(strip $(TARGET_USR)),)
-	@echo "---- Copying net_downlink files to $(TARGET_IP):$(TARGET_DIR)"
-	@ssh $(TARGET_USR)@$(TARGET_IP) "mkdir -p $(TARGET_DIR)"
-	@scp net_downlink $(TARGET_USR)@$(TARGET_IP):$(TARGET_DIR)
-  else
-	@echo "ERROR: TARGET_USR is not configured in target.cfg"
-  endif
- else
-	@echo "ERROR: TARGET_DIR is not configured in target.cfg"
- endif
-else
-	@echo "ERROR: TARGET_IP is not configured in target.cfg"
-endif
-
 $(OBJDIR):
 	mkdir -p $(OBJDIR)
 
+$(OBJDIR)/%.o: src/%.c $(INCLUDES) | $(OBJDIR)
+	$(CC) -c $(CFLAGS) -I$(LGW_PATH)/inc $< -o $@
+
 ### Compile main program
-$(OBJDIR)/$(APP_NAME).o: src/$(APP_NAME).c | $(OBJDIR)
-	$(CC) -c $< -o $@ $(CFLAGS) -Iinc -I../libtools/inc
+$(OBJDIR)/$(APP_NAME).o: src/$(APP_NAME).c $(LGW_INC) $(INCLUDES) | $(OBJDIR)
+	$(CC) -c $(CFLAGS) $(VFLAG) -I$(LGW_PATH)/inc $< -o $@
 
 ### Link everything together
-$(APP_NAME): $(OBJDIR)/$(APP_NAME).o
-	$(CC) -L$(LIB_PATH) $^ -o $@ $(LDFLAGS) $(APP_LIBS)
+$(APP_NAME): $(OBJDIR)/$(APP_NAME).o $(LGW_PATH)/libloragw.a  
+	$(CC) -L$(LGW_PATH) -L$(LIB_PATH) -L../libtools $<  -o $@ $(LIBS)
 
 ### EOF
diff --git a/util_spectral_scan/Makefile b/util_spectral_scan/Makefile
index 9322009..4bfc440 100644
--- a/util_spectral_scan/Makefile
+++ b/util_spectral_scan/Makefile
@@ -1,50 +1,30 @@
-### get external defined data
-
-include ../target.cfg
+APP_NAME := spectral_scan
 
 ### User defined build options
 
+LGW_PATH ?= ../libloragw
+LIB_PATH ?= ../libtools
 ARCH ?=
 CROSS_COMPILE ?=
-BUILD_MODE := release
+ 
 OBJDIR = obj
+INCLUDES = $(wildcard inc/*.h)
 
-### ----- AVOID MODIFICATIONS BELLOW ------ AVOID MODIFICATIONS BELLOW ----- ###
-
-ifeq '$(BUILD_MODE)' 'alpha'
-  $(warning /\/\/\/ Building in 'alpha' mode \/\/\/\)
-  WARN_CFLAGS   :=
-  OPT_CFLAGS    := -O0
-  DEBUG_CFLAGS  := -g
-  LDFLAGS       :=
-else ifeq '$(BUILD_MODE)' 'debug'
-  $(warning /\/\/\/  Building in 'debug' mode \/\/\/\)
-  WARN_CFLAGS   := -Wall -Wextra
-  OPT_CFLAGS    := -O2
-  DEBUG_CFLAGS  := -g
-  LDFLAGS       :=
-else ifeq  '$(BUILD_MODE)' 'release'
-  $(warning /\/\/\/  Building in 'release' mode \/\/\/\)
-  WARN_CFLAGS   := -Wall -Wextra
-  OPT_CFLAGS    := -O2 -ffunction-sections -fdata-sections
-  DEBUG_CFLAGS  :=
-  LDFLAGS       := -Wl,--gc-sections
-else
-  $(error BUILD_MODE must be set to either 'alpha', 'debug' or 'release')
-endif
-
-### Application-specific variables
-APP_NAME := spectral_scan
-APP_LIBS := -lloragw -lm -ltinymt32 -lrt
+include $(LGW_PATH)/library.cfg
+RELEASE_VERSION := `cat ../VERSION`
 
-### Environment constants
-LIB_PATH := ../libloragw
 
 ### Expand build options
-CFLAGS := -std=c99 $(WARN_CFLAGS) $(OPT_CFLAGS) $(DEBUG_CFLAGS)
+
 CC := $(CROSS_COMPILE)gcc
 AR := $(CROSS_COMPILE)ar
 
+CFLAGS := -O2 -Wall -Wextra -std=c99 -Iinc -I. -I../libtools/inc
+
+LIBS := -lloragw -ltinymt32 -lparson -lbase64 -lrt -lpthread -lm
+
+VFLAG := -D VERSION_STRING="\"$(RELEASE_VERSION)\""
+
 ### General build targets
 all: $(APP_NAME)
 
@@ -52,32 +32,18 @@ clean:
 	rm -f obj/*.o
 	rm -f $(APP_NAME)
 
-install:
-ifneq ($(strip $(TARGET_IP)),)
- ifneq ($(strip $(TARGET_DIR)),)
-  ifneq ($(strip $(TARGET_USR)),)
-	@echo "---- Copying spectral_scan files to $(TARGET_IP):$(TARGET_DIR)"
-	@ssh $(TARGET_USR)@$(TARGET_IP) "mkdir -p $(TARGET_DIR)"
-	@scp spectral_scan $(TARGET_USR)@$(TARGET_IP):$(TARGET_DIR)
-  else
-	@echo "ERROR: TARGET_USR is not configured in target.cfg"
-  endif
- else
-	@echo "ERROR: TARGET_DIR is not configured in target.cfg"
- endif
-else
-	@echo "ERROR: TARGET_IP is not configured in target.cfg"
-endif
-
 $(OBJDIR):
 	mkdir -p $(OBJDIR)
 
+$(OBJDIR)/%.o: src/%.c $(INCLUDES) | $(OBJDIR)
+	$(CC) -c $(CFLAGS) -I$(LGW_PATH)/inc $< -o $@
+
 ### Compile main program
-$(OBJDIR)/$(APP_NAME).o: src/$(APP_NAME).c | $(OBJDIR)
-	$(CC) -c $< -o $@ $(CFLAGS) -Iinc -I../libloragw/inc
+$(OBJDIR)/$(APP_NAME).o: src/$(APP_NAME).c $(LGW_INC) $(INCLUDES) | $(OBJDIR)
+	$(CC) -c $(CFLAGS) $(VFLAG) -I$(LGW_PATH)/inc $< -o $@
 
 ### Link everything together
-$(APP_NAME): $(OBJDIR)/$(APP_NAME).o $(LIB_PATH)/libloragw.a
-	$(CC) -L$(LIB_PATH) -L../libtools $^ -o $@ $(LDFLAGS) $(APP_LIBS)
+$(APP_NAME): $(OBJDIR)/$(APP_NAME).o $(LGW_PATH)/libloragw.a  
+	$(CC) -L$(LGW_PATH) -L$(LIB_PATH) -L../libtools $<  -o $@ $(LIBS)
 
 ### EOF
-- 
2.25.1

